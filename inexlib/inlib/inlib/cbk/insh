// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_sg_insh
#define inlib_cbk_sg_insh

#include <inlib/sg/gui_viewer>

namespace inlib {
namespace cbk {

inline inlib::sg::return_action action_insh_1(inlib::sg::gui_viewer& a_gv,inlib::sg::entries& a_widget) {
  const std::string& cmd = a_widget.values[0];
  const std::string& sargs = a_widget.values[1];
/*
  insh::state _state(a_gv.out());
 {bool value;tob(a_widget.values[2],value,false);_state.m_set_v = value;}
 {bool value;tob(a_widget.values[3],value,false);_state.m_set_x = value;}
 {bool value;tob(a_widget.values[4],value,false);_state.m_set_n = value;}
 {bool value;tob(a_widget.values[5],value,false);_state.m_set_d = value;}

  a_gv.insh().exec_line(cmd+" "+sargs,_state);
  */
  a_gv.insh().exec_line_reset_to_stop(cmd+" "+sargs);
  return sg::return_to_render;
}

inline inlib::sg::return_action action_menu_insh(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::entries* entries = new inlib::sg::entries(a_gv.ttf());
  a_gv.set_style(*entries);

  std::vector<std::string> names;
  a_gv.insh().exec_names(names);

//entries->add_opts("names",names.size()?names[0]:"",names);
  entries->add_combo_string("cmd",names.size()?names[0]:"",names);  //combo, to be able to give an insh file name to execute.
  entries->add_string("args","");
/*
  entries->add_bool("set v",a_gv.insh().set_v());
  entries->add_bool("set x",a_gv.insh().set_x());
  entries->add_bool("set n",a_gv.insh().set_n());
  entries->add_bool("set d",a_gv.insh().set_d());
*/
  inlib::sg::add_callback(a_gv,*entries,action_insh_1);
  a_gv.push_list(entries);
  return inlib::sg::return_to_render;
}


inline sg::return_action action_menu_insh_keyboard_ok(sg::gui_viewer& a_gv,sg::keyboard& a_widget) {
  a_gv.insh().exec_line_reset_to_stop(a_widget.value.value());
  return sg::return_to_render;
}

inline sg::return_action action_menu_insh_keyboard(sg::gui_viewer& a_gv) {
  sg::keyboard* node = new sg::keyboard(a_gv.ttf());
  a_gv.set_style(*node);
  sg::add_callback(a_gv,*node,action_menu_insh_keyboard_ok);
  a_gv.push_list(node);
  return sg::return_to_render;
}

}}

#endif
