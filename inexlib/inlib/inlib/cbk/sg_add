// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_sg_add
#define inlib_cbk_sg_add

#include <inlib/sg/view_evd>
#include <inlib/sg/view_sg_client>
#include <inlib/sg/xy_grid>
#include <inlib/sg/cone_hat>
#include <inlib/sg/show_time_anim>
#include <inlib/sg/insh_anim>
#include <inlib/parse>

namespace inlib {
namespace cbk {

inline void scene_add_xy_grid(sg::gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) {a_gv.insh().warn("scene_add_xy_grid","bad evd cast.");return;}

  ////////////////////////////////////////
  /// args : /////////////////////////////
  ////////////////////////////////////////
  args _args(a_args);
  //_args.remove_string_delimiters_in_values();

  colorf color = colorf_lightgrey();
  INLIB_GUI_VIEWER_GET_ARG_COLOR(scene_add_xy_grid,color,)
  float line_width = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_xy_grid,line_width,)
  float sx = 0.1f;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_xy_grid,sx,)
  unsigned int nx = 10;
  INLIB_GUI_VIEWER_GET_ARG_UINT(scene_add_xy_grid,nx,)
  float sy = 0.1f;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_xy_grid,sy,)
  unsigned int ny = 10;
  INLIB_GUI_VIEWER_GET_ARG_UINT(scene_add_xy_grid,ny,)
  
  vec3f translate(0,0,0);
  INLIB_GUI_VIEWER_GET_ARG_VEC3F(scene_add_xy_grid,translate,)
  vec4f rotate(0,0,1,0);
  INLIB_GUI_VIEWER_GET_ARG_VEC4F(scene_add_xy_grid,rotate,)
  
  float scale = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_xy_grid,scale,)
  ////////////////////////////////////////
  ////////////////////////////////////////
  ////////////////////////////////////////
  
  sg::separator& dsep = _evd->static_sg();

  sg::separator* sep = new sg::separator;
  dsep.add(sep);
  
  sg::matrix* _mtx = new sg::matrix;
  sep->add(_mtx);

  _mtx->mul_translate(translate);   //applied third.
  _mtx->mul_rotate(rotate.v0(),rotate.v1(),rotate.v2(),rotate.v3());   //applied second.
  _mtx->mul_scale(scale);           //applied first.

  sg::draw_style* ds = new sg::draw_style;
  ds->style = sg::draw_lines;
  ds->line_width = line_width;
  sep->add(ds);
  
  sg::rgba* mat = new sg::rgba();
  mat->color = color;
  sep->add(mat);
    
  sg::xy_grid* _grid = new sg::xy_grid;
  _grid->sx = sx;
  _grid->nx = nx;
  _grid->sy = sy;
  _grid->ny = ny;
  sep->add(_grid);

 {args opts;
  opts.add(sg::s_send_placement(),sg::s_placement_static());
  sg::view_sg_client* wc = sg::cast_view_sg_client(a_gv);
  if(wc) {if(!wc->send_sg(*sep,opts)){}}}
}

inline const std::string& scene_add_xy_grid_help() {
  static const std::string s_help("\
scene_add_xy_grid: scene_add_xy_grid [options]\n\
  Add a wire-frame grid in the static scene graph.\n\
  -color=string color of the grid (default lightgrey).\n\
  -line_width=real line width (default 1).\n\
  -sx=real x size of each cell (default 0.1).\n\
  -sy=real y size of each cell (default 0.1).\n\
  -nx=uint x number of cells (default 10).\n\
  -ny=uint y number of cells (default 10).\n\
  -scale=real overall scale (default 1).\n\
  -rotate='real real real real' overall rotation (default '0 0 1 0'). First\n\
  three numbers specify the axis, the last one the angle in radians.\n\
  -transtale='real real real' overall translation of the grid (default '0 0 0').\n\
  Scale, rotation, translation are applied in this order.\n\
  Example:\n\
    scene_add_xy_grid -color=lightgrey -line_width=1 -translate='0 -300 0' -rotate='1 0 0 1.570796' -sx=100 -nx=10 -sy=100 -ny=10\n\
");
  return s_help;
}

inline void set_ROOT_style(sg::text_style& a_style) {
  a_style.font = sg::font_arialbd_ttf();
//a_style.font_modeling = sg::font_pixmap;
  a_style.front_face = sg::winding_cw;
  a_style.smoothing = true;
}  

inline void scene_add_axes(sg::gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) {a_gv.insh().warn("scene_add_axes","bad evd cast.");return;}
    
  ////////////////////////////////////////
  /// args : /////////////////////////////
  ////////////////////////////////////////
  args _args(a_args);
  
  colorf color = colorf_lightgrey();
  INLIB_GUI_VIEWER_GET_ARG_COLOR(scene_add_axes,color,)

  vec3f translate(0,0,0);
  INLIB_GUI_VIEWER_GET_ARG_VEC3F(scene_add_axes,translate,)
  vec4f rotate(0,0,1,0);
  INLIB_GUI_VIEWER_GET_ARG_VEC4F(scene_add_axes,rotate,)
  float scale = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,scale,)

  std::string sx_title("x");
  INLIB_GUI_VIEWER_GET_ARG_STRING(x_title)
  float x_width = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,x_width,)
  float x_min = 0;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,x_min,)
  float x_max = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,x_max,)
  
  std::string sy_title("y");
  INLIB_GUI_VIEWER_GET_ARG_STRING(y_title)
  float y_width = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,y_width,)
  float y_min = 0;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,y_min,)
  float y_max = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,y_max,)
  
  std::string sz_title("z");
  INLIB_GUI_VIEWER_GET_ARG_STRING(z_title)
  float z_width = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,z_width,)
  float z_min = 0;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,z_min,)
  float z_max = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_axes,z_max,)
  
  ////////////////////////////////////////
  ////////////////////////////////////////
  ////////////////////////////////////////
  sg::separator& dsep = _evd->static_sg();
  
  sg::separator* sep = new sg::separator;
  dsep.add(sep);
    
 {sg::matrix* mtx = new sg::matrix;
  mtx->mul_translate(translate);   //applied third.
  mtx->mul_rotate(rotate.v0(),rotate.v1(),rotate.v2(),rotate.v3());   //applied second.
  mtx->mul_scale(scale);           //applied first.
  sep->add(mtx);}

 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);
  sg::axis* axis = new sg::axis(a_gv.ttf());    
  axis->title = sx_title;
  axis->width = x_width;
  axis->minimum_value = x_min;
  axis->maximum_value = x_max;
  axis->tick_up = false;
  axis->set_color(color);
  set_ROOT_style(axis->labels_style());
  set_ROOT_style(axis->title_style());
  set_ROOT_style(axis->mag_style());
 {sg::text_style& _style = axis->labels_style();
  _style.x_orientation = vec3f(1,0,0);
  _style.y_orientation = vec3f(0,1,0);
  _style.hjust = sg::center;
  _style.vjust = sg::top;}
 {sg::text_style& _style = axis->title_style();
  _style.x_orientation = vec3f(1,0,0);
  _style.y_orientation = vec3f(0,1,0);
  _style.hjust = sg::right;
  _style.vjust = sg::top;}

  _sep->add(axis);}

 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);
    
  sg::matrix* mtx = new sg::matrix;
  mtx->set_rotate(0,0,1,fhalf_pi());
  mtx->mul_rotate(1,0,0,fpi()); //applied first.
  _sep->add(mtx);
    
  sg::axis* axis = new sg::axis(a_gv.ttf());    
  axis->title = sy_title;
  axis->width = y_width;
  axis->minimum_value = y_min;
  axis->maximum_value = y_max;
  axis->tick_up = false;
  axis->set_color(color);
  set_ROOT_style(axis->labels_style());
  set_ROOT_style(axis->title_style());
  set_ROOT_style(axis->mag_style());
 {sg::text_style& _style = axis->labels_style();
  _style.x_orientation = vec3f(0,1,0);
  _style.y_orientation = vec3f(1,0,0);
  _style.hjust = sg::right;
  _style.vjust = sg::middle;}
 {sg::text_style& _style = axis->title_style();
  _style.x_orientation = vec3f(0,1,0);
  _style.y_orientation = vec3f(1,0,0);
  _style.hjust = sg::right;
  _style.vjust = sg::bottom;}

  _sep->add(axis);}

 {sg::separator* _sep = new sg::separator;
  sep->add(_sep);
    
  sg::matrix* mtx = new sg::matrix;
  mtx->set_rotate(0,1,0,-fhalf_pi());
  _sep->add(mtx);
    
  sg::axis* axis = new sg::axis(a_gv.ttf());    
  axis->title = sz_title;
  axis->width = z_width;
  axis->minimum_value = z_min;
  axis->maximum_value = z_max;
  axis->tick_up = false;
  axis->set_color(color);
  set_ROOT_style(axis->labels_style());
  set_ROOT_style(axis->title_style());
  set_ROOT_style(axis->mag_style());
 {sg::text_style& _style = axis->labels_style();
  if(true) { //in yz plane text:
    _style.x_orientation = vec3f(-1,0,0);
    _style.y_orientation = vec3f( 0,1,0);
    _style.hjust = sg::center;
    _style.vjust = sg::top;
  } else { //in xy plane text:
    _style.x_orientation = vec3f(-1,0,0);
    _style.y_orientation = vec3f( 0,1,0);
    _style.hjust = sg::center;
    _style.vjust = sg::top;
  }}
 {sg::text_style& _style = axis->title_style();
  if(true) { //in yz plane text:
    _style.x_orientation = vec3f(-1,0,0);
    _style.y_orientation = vec3f( 0,1,0);
    _style.hjust = sg::center;
    _style.vjust = sg::top;
  } else { //in xy plane text:
    _style.x_orientation = vec3f(-1,0,0);
    _style.y_orientation = vec3f( 0,1,0);
    _style.hjust = sg::center;
    _style.vjust = sg::top;
  }}

  _sep->add(axis);}

 {args opts;
  opts.add(sg::s_send_placement(),sg::s_placement_static());
  sg::view_sg_client* wc = sg::cast_view_sg_client(a_gv);
  if(wc) {if(!wc->send_sg(*sep,opts)){}}}

}
  
inline const std::string& scene_add_axes_help() {
  static const std::string s_help("\
scene_add_axes: scene_add_axes [options]\n\
  Add x,y,z axes in the static scene graph.\n\
  -color=string color of the axes (default lightgrey).\n\
  -[x,y,z]_title=string title of the [x,y,z] axis (default \"[x,y,z]\").\n\
  -[x,y,z]_width=real width of the [x,y,z] axis (default 1).\n\
  -[x,y,z]_min=real minimum value the [x,y,z] axis (default 0).\n\
  -[x,y,z]_max=real maximum value the [x,y,z] axis (default 1).\n\
  -scale=real overall scale (default 1).\n\
  -rotate='real real real real' overall rotation (default '0 0 1 0'). First\n\
  three numbers specify the axis, the last one the angle in radians.\n\
  -transtale='real real real' overall translation of the grid (default '0 0 0').\n\
  Scale, rotation, translation are applied in this order.\n\
  Example:\n\
    scene_add_axes -color=lightgrey -translate='-300 -300 0' -rotate='1 0 0 1.570796' -scale=1 -x_width=600 -x_min=0 -x_max=600 -y_width=600 -y_min=0 -y_max=600 -z_width=600 -z_min=0 -z_max=600 \n\
");
  return s_help;
}

inline void scene_add_cone_hat(sg::gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) {a_gv.insh().warn("scene_add_cone_hat","bad evd cast.");return;}
    
  ////////////////////////////////////////
  /// args : /////////////////////////////
  ////////////////////////////////////////
  args _args(a_args);
  
  colorf color = colorf_lightgrey();
  INLIB_GUI_VIEWER_GET_ARG_COLOR(scene_add_cone_hat,color,)

  float angle = fpi()/4.0f;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_cone_hat,angle,)
  float height = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_cone_hat,height,)
  
  ////////////////////////////////////////
  ////////////////////////////////////////
  ////////////////////////////////////////
  float rmax = ftan(angle)*height;

  ////////////////////////////////////////
  ////////////////////////////////////////
  ////////////////////////////////////////
  sg::separator* sep = new sg::separator;
    
  sep->add(new sg::matrix);

  sg::rgba* mat = new sg::rgba();
  mat->color = color;
  sep->add(mat);

  sg::cone_hat* cone = new sg::cone_hat;
  cone->height = height;
  cone->rmin = 0;
  cone->rmax = rmax;
  sep->add(cone);

  _evd->dynamic_sg().add(sep);

 {args opts;
  opts.add(sg::s_send_placement(),sg::s_placement_dynamic());
  sg::view_sg_client* wc = sg::cast_view_sg_client(a_gv);
  if(wc && wc->is_connected()) {if(!wc->send_sg(*sep,opts)){}}}

}
  
inline const std::string& scene_add_cone_help() {
  static const std::string s_help("\
scene_add_cone: scene_add_cone [options]\n\
  Add a cone in the dynamic scene graph.\n\
  -color=string color of the cone (default lightgrey).\n\
  -height=real height of the cone (default 1).\n\
  -angle=real angle of the cone (default pi/4).\n\
  Example:\n\
    scene_add_cone -angle=0.5235 -height=10  # angle pi/6\n\
");
  return s_help;
}

inline void scene_add_vertices(sg::gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) {a_gv.insh().warn("scene_add_vertices","bad evd cast.");return;}
    
  ////////////////////////////////////////
  /// args : /////////////////////////////
  ////////////////////////////////////////
  args _args(a_args);
  
  std::string splacement;
  INLIB_GUI_VIEWER_GET_ARG_STRING(placement)
  
  gl::mode_t mode = gl::points();
  INLIB_GUI_VIEWER_GET_ARG_GL_PRIM(scene_add_vertices,mode,)

  colorf color = colorf_lightgrey();
  INLIB_GUI_VIEWER_GET_ARG_COLOR(scene_add_vertices,color,)

  float line_width = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_vertices,line_width,)
  float point_size = 1;
  INLIB_GUI_VIEWER_GET_ARG_FLOAT(scene_add_vertices,point_size,)

  std::vector<std::string> vs;
  _args.to_vector(vs);
//_args.not_hyphens(vs);  //does not work since some numbers may be negative.
  
  std::vector<float> fs;
 {float value;
  inlib_vforcit(std::string,vs,it) {
    if(!inlib::to<float>(*it,value)) {
      a_gv.insh().warn("scene_add_vertices : "+(*it)+" is not a float.");
      return;
    }
    fs.push_back(value);
  }}

  ////////////////////////////////////////
  ////////////////////////////////////////
  ////////////////////////////////////////
  size_t num_points = fs.size()/3;
 {std::string snum_points;
  size_t2s(fs.size(),snum_points);
  if(num_points*3!=fs.size()) {
    a_gv.insh().warn("scene_add_vertices : a multiple of three numbers expected. ("+snum_points+") given.");
    return;
  }}

  sg::separator* sep = new sg::separator;
    
  sep->add(new sg::matrix);

  if(mode==gl::points()) {
    sg::draw_style* ds = new sg::draw_style;
    ds->style = inlib::sg::draw_points;
    ds->point_size = point_size;
    sep->add(ds);
  } if( (mode==gl::lines()) || (mode==gl::line_loop()) || (mode==gl::line_strip()) ){
    sg::draw_style* ds = new sg::draw_style;
    ds->style = sg::draw_lines;
    ds->line_width = line_width;
    sep->add(ds);
  }
  
  sg::rgba* mat = new sg::rgba();
  mat->color = color;
  sep->add(mat);

  sg::vertices* vtxs = new sg::vertices;
  vtxs->mode = mode;
  vtxs->add(fs);
  sep->add(vtxs);

 {args opts;
  if((splacement==inlib::sg::s_placement_static())) {
    _evd->static_sg().add(sep);
    opts.add(inlib::sg::s_send_placement(),inlib::sg::s_placement_static());
  } else if(splacement.empty()||(splacement==inlib::sg::s_placement_dynamic())) {
    _evd->dynamic_sg().add(sep);
    opts.add(inlib::sg::s_send_placement(),inlib::sg::s_placement_dynamic());
  } else if(splacement==inlib::sg::s_placement_static_blend()) {
    _evd->static_blend_sg().add(sep);
    opts.add(inlib::sg::s_send_placement(),inlib::sg::s_placement_static_blend());
  } else {
    a_gv.insh().warn("scene_add_vertices : unknown placement "+inlib::sout(splacement)+".");
    delete sep;
    return;
  }
  sg::view_sg_client* wc = sg::cast_view_sg_client(a_gv);
  if(wc && wc->is_connected()) {if(!wc->send_sg(*sep,opts)){}}}

}
  
inline const std::string& scene_add_vertices_help() {
  static const std::string s_help("\
scene_add_vertices: scene_add_vertices [options] [x y z]\n\
  Add a primitive in a scene graph.\n\
  -placement=[static,dynamic,static_blend] the scene graph to add into (default dynamic).\n\
  -mode=[points,lines,line_loop,line_strip,triangles,triangle_strip,triangle_fan] (default points).\n\
  Note that lines is for segments, and line_strip is for a polyline.\n\
  -color=string color of the vertices (default lightgrey).\n\
  -line_width=real line width (default 1) if relevant.\n\
  -point_size=real point size (default 1) if relevant.\n\
  Example: add a wire-frame square :\n\
    scene_add_vertices -mode=line_strip -color=blue 0 0 0 1 0 0 1 1 0 0 1 0 0 0 0\n\
  Example: add a trianle :\n\
    scene_add_vertices -mode=triangles -color=blue -1 0 0 1 0 0 0 1 0\n\
");
  return s_help;
}

inline void scene_add_show_time_anim(sg::gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) {a_gv.insh().warn("add_show_time_anim","bad evd cast.");return;}
    
  inlib::sg::show_time_anim* _anim = new inlib::sg::show_time_anim(a_gv);

  _evd->dynamic_sg().add(_anim);

 {args opts;
  opts.add(sg::s_send_placement(),sg::s_placement_dynamic());
  sg::view_sg_client* wc = sg::cast_view_sg_client(a_gv);
  if(wc && wc->is_connected()) {if(!wc->send_sg(*_anim,opts)){}}}

}
  
inline const std::string& scene_add_show_time_anim_help() {
  static const std::string s_help("\
scene_add_show_time_anim: scene_add_show_time_anim\n\
  Add a show_time_anim node in the dynamic scene graph.\n\
");
  return s_help;
}

inline void scene_add_insh_anim(sg::gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) return;

  args _args(a_args);
  std::string sfile;
  if(!_args.find("-file",sfile)||sfile.empty()) {
    a_gv.insh().warn("scene_add_insh_anim : no -file=<string> argument given.");
    return;
  }

  std::vector<std::string> lines;
  lines.push_back(". "+sfile);

  sg::insh_anim* _anim = new sg::insh_anim(a_gv.insh());
  _anim->script = lines;
  
  _evd->dynamic_sg().add(_anim);

}

inline const std::string& scene_add_insh_anim_help() {
  static const std::string s_help("\
scene_add_insh_anim: scene_add_insh_anim [-file]\n\
  Add an insh_anim node in the dynamic scene graph.\n\
  -file=string insh file sourced during the animation.\n\
  WARNING, IMPORTANT, ACHTUNG, ATTENZIONE:\n\
   You must NOT do a scene_clear_dynamic in an anim script because\n\
  the insh_anim node is deposited in the dynamic scene graph.\n\
  The variables insh_anim_[time_min,time_max,delay,time_begin,time_end] are defined at\n\
  each time slice execution of the script.\n\
");
  return s_help;
}

}}

#endif
