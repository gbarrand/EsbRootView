// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_esb_event_model
#define inlib_esb_event_model

#ifdef INLIB_MEM
#include <inlib/mem>
#include <inlib/S_STRING>
#endif //INLIB_MEM

namespace inlib {

class EsbMCTrack {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::EsbMCTrack)
#endif  
  typedef double double32; //ROOT stuff, a double, but stored in file as float (!).
public:
  EsbMCTrack(double a_px,double a_py,double a_pz,double a_x,double a_y,double a_z,double a_t)
  :fPx(a_px),fPy(a_py),fPz(a_pz)
  ,fStartX(a_x),fStartY(a_y),fStartZ(a_z),fStartT(a_t)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif    
  }
  virtual ~EsbMCTrack() {
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif    
  }
protected:
  EsbMCTrack(const EsbMCTrack&) {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif    
  }
  EsbMCTrack& operator=(const EsbMCTrack&) {return *this;}
public:
  double GetPx()       const { return fPx; }
  double GetPy()       const { return fPy; }
  double GetPz()       const { return fPz; }
  double GetStartX()   const { return fStartX; }
  double GetStartY()   const { return fStartY; }
  double GetStartZ()   const { return fStartZ; }
  double GetStartT()   const { return fStartT; }
protected:
public:  
  int fPdgCode;
  //int fMotherId;  // Index of mother track. -1 for primary particles.
  double32 fPx, fPy, fPz; // Momentum components at start vertex [GeV].
  double32 fStartX, fStartY, fStartZ, fStartT; // Coordinates of start vertex [cm, ns].
};

class EsbWCDetectorPoint {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::EsbWCDetectorPoint)
#endif  
  typedef double double32; //ROOT stuff, a double, but stored in file as float (!).
public:
  EsbWCDetectorPoint(double a_px,double a_py,double a_pz,double a_x,double a_y,double a_z)
  :fPx(a_px),fPy(a_py),fPz(a_pz)
  ,fX(a_x),fY(a_y),fZ(a_z)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif    
  }
  virtual ~EsbWCDetectorPoint() {
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif    
  }
protected:
  EsbWCDetectorPoint(const EsbWCDetectorPoint&) {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif    
  }
  EsbWCDetectorPoint& operator=(const EsbWCDetectorPoint&) {return *this;}
public:
  double GetPx()  const { return fPx; }
  double GetPy()  const { return fPy; }
  double GetPz()  const { return fPz; }
  double GetX()   const { return fX; }
  double GetY()   const { return fY; }
  double GetZ()   const { return fZ; }
protected:
public:  
  double32 fPx, fPy, fPz;  // Momentum of track at entrance [GeV].
  double32 fX, fY, fZ;     // Ccoordinates at entrance to active volume [cm].
};

}

#endif
