// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_insh
#define inlib_rroot_insh

#include "../ishell"
#include "../args"

#include "geo_manager"
#include "file"
#include "geo_tools"
#include "../mat4d"

namespace inlib {
namespace rroot {

inline bool read_geo_manager(std::ostream& a_out,file& a_file,geo_manager& a_mgr) {
  key* key = a_file.dir().find_key_from_class("TGeoManager");
  if(!key) {
    a_out << "TGeoManager key not found." << std::endl;
    return false;
  }
  unsigned int sz;
  char* buf = key->get_object_buffer(a_file,sz);
  if(!buf) {
    a_out << "can't get data buffer TGeoManager key." << std::endl;
    return false;
  }
  inlib::rroot::buffer b(a_out,a_file.byte_swap(),sz,buf,key->key_length(),false);
  b.set_map_objs(true);
  if(!a_mgr.stream(b)) {
    a_out << "streaming failed for TGeoManager." << std::endl;
    return false;
  }
  return true;
}

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
inline void insh_geo_print(ishell& a_insh,geo_manager& a_mgr,const std::vector<std::string>& a_args) {
  static const std::string s_header("geo_print :");
  if(a_args.empty()) {
    a_insh.out() << "manager name : " << sout(a_mgr.name()) << std::endl;
    a_insh.out() << "manager title : " << sout(a_mgr.title()) << std::endl;
    a_mgr.dump_volumes(a_insh.out());
    return;
  }
  const inlib::rroot::geo_volume* master = a_mgr.master();
  if(!master) {
    a_insh.warn(s_header+" geo_manager "+sout(a_mgr.name())+" has no master volume.");
    return;
  }
  args _args(a_args);
  std::string name;
  if(!_args.first_not_hyphen(name)) {
    a_insh.warn(s_header+" no name given.");
    return;
  }
  if(!inlib::rroot::find_and_dump_volume(a_insh.out(),*master,name)) {
    a_insh.set_to_stop();
    return;
  }
  bool found = false;
  inlib::mat4d mtx;mtx.set_identity();
  if(!inlib::rroot::volume_get_matrix(a_insh.out(),*master,name,mtx,found)) {
    a_insh.set_to_stop();
    return;
  }
  if(!found) {
    a_insh.warn(s_header+" can't get matrix.");
    return;
  }
  a_insh.out() << "world matrix :" << std::endl;
  a_insh.out() << mtx << std::endl;
}

inline const std::string& insh_geo_print_help() {
  static const std::string s_help("\
geo_print: geo_print [name]\n\
  Without arguments, print the geo_volume names with their shape.\n\
  Else, print a named geo_volume informations.\n\
  Example:\n\
    geo_print\n\
    geo_print wc\n\
");
  return s_help;
}

inline void insh_geo_tree(ishell& a_insh,geo_manager& a_mgr,const std::vector<std::string>& a_args) {
  static const std::string s_header("geo_tree :");
  const inlib::rroot::geo_volume* master = a_mgr.master();
  if(!master) {
    a_insh.warn(s_header+" geo_manager "+sout(a_mgr.name())+" has no master volume.");
    return;
  }
  inlib::rroot::volume_tree(a_insh.out(),*master);
}

inline const std::string& insh_geo_tree_help() {
  static const std::string s_help("\
geo_tree: geo_tree\n\
  Print the geoemtry tree infos.\n\
  Example:\n\
    geo_tree\n\
");
  return s_help;
}

inline void insh_geo_field(ishell& a_insh,geo_manager& a_mgr,const std::vector<std::string>& a_args) {
  static const std::string s_header("geo_field :");
  const inlib::rroot::geo_volume* master = a_mgr.master();
  if(!master) {
    a_insh.warn(s_header+" geo_manager "+sout(a_mgr.name())+" has no master volume.");
    return;
  }
  args _args(a_args);
  std::vector<std::string> ws;
  _args.not_hyphens(ws);
  if(ws.size()!=2) {
    a_insh.warn(s_header+" two arguments expected.");
    return;
  }
  const std::string& volname = ws[0];
  const inlib::rroot::geo_volume* vol = inlib::rroot::find_by_name(*master,volname);
  if(!vol) {
    a_insh.warn(s_header+" volume "+sout(volname)+" not found under.");
    return;
  }
  const inlib::rroot::geo_shape* shape = vol->shape();
  if(!shape) {
    a_insh.warn(s_header+" volume "+sout(volname)+" has no geo_shape.");
    return;
  }
  const std::string& field = ws[1];

 {if(const inlib::rroot::geo_tube* _shape = inlib::rroot::cast_shape<inlib::rroot::geo_tube>(*shape)) {
    if(field=="o_x") {a_insh.out_num(_shape->origin_x());return;}
    if(field=="o_y") {a_insh.out_num(_shape->origin_y());return;}
    if(field=="o_z") {a_insh.out_num(_shape->origin_z());return;}
    if(field=="d_x") {a_insh.out_num(_shape->d_x());return;}
    if(field=="d_y") {a_insh.out_num(_shape->d_y());return;}
    if(field=="d_z") {a_insh.out_num(_shape->d_z());return;}
    if(field=="rmin") {a_insh.out_num(_shape->rmin());return;}
    if(field=="rmax") {a_insh.out_num(_shape->rmax());return;}
    if(field=="dz") {a_insh.out_num(_shape->dz());return;}
    a_insh.warn(s_header+" unknow field "+sout(field)+" for volume "+sout(volname)+".");
    return;
  }}

 {if(const inlib::rroot::geo_trd1* _shape = inlib::rroot::cast_shape<inlib::rroot::geo_trd1>(*shape)) {
    if(field=="o_x") {a_insh.out_num(_shape->origin_x());return;}
    if(field=="o_y") {a_insh.out_num(_shape->origin_y());return;}
    if(field=="o_z") {a_insh.out_num(_shape->origin_z());return;}
    if(field=="d_x") {a_insh.out_num(_shape->d_x());return;}
    if(field=="d_y") {a_insh.out_num(_shape->d_y());return;}
    if(field=="d_z") {a_insh.out_num(_shape->d_z());return;}
    if(field=="dx1") {a_insh.out_num(_shape->dx1());return;}
    if(field=="dx2") {a_insh.out_num(_shape->dx2());return;}
    if(field=="dy") {a_insh.out_num(_shape->dy());return;}
    if(field=="dz") {a_insh.out_num(_shape->dz());return;}
    a_insh.warn(s_header+" unknow field "+sout(field)+" for volume "+sout(volname)+".");
    return;
  }}

 {if(const inlib::rroot::geo_trd2* _shape = inlib::rroot::cast_shape<inlib::rroot::geo_trd2>(*shape)) {
    if(field=="o_x") {a_insh.out_num(_shape->origin_x());return;}
    if(field=="o_y") {a_insh.out_num(_shape->origin_y());return;}
    if(field=="o_z") {a_insh.out_num(_shape->origin_z());return;}
    if(field=="d_x") {a_insh.out_num(_shape->d_x());return;}
    if(field=="d_y") {a_insh.out_num(_shape->d_y());return;}
    if(field=="d_z") {a_insh.out_num(_shape->d_z());return;}
    if(field=="dx1") {a_insh.out_num(_shape->dx1());return;}
    if(field=="dx2") {a_insh.out_num(_shape->dx2());return;}
    if(field=="dy1") {a_insh.out_num(_shape->dy1());return;}
    if(field=="dy2") {a_insh.out_num(_shape->dy2());return;}
    if(field=="dz") {a_insh.out_num(_shape->dz());return;}
    a_insh.warn(s_header+" unknow field "+sout(field)+" for volume "+sout(volname)+".");
    return;
  }}

  // bbox should be last, since it is inherited by most of shapes.
 {if(const inlib::rroot::geo_bbox* _shape = inlib::rroot::cast_shape<inlib::rroot::geo_bbox>(*shape)) {
    if(field=="o_x") {a_insh.out_num(_shape->origin_x());return;}
    if(field=="o_y") {a_insh.out_num(_shape->origin_y());return;}
    if(field=="o_z") {a_insh.out_num(_shape->origin_z());return;}
    if(field=="d_x") {a_insh.out_num(_shape->d_x());return;}
    if(field=="d_y") {a_insh.out_num(_shape->d_y());return;}
    if(field=="d_z") {a_insh.out_num(_shape->d_z());return;}
    a_insh.warn(s_header+" unknow field "+sout(field)+" for volume "+sout(volname)+".");
    return;
  }}

  a_insh.out() << s_header << " this shape class " << sout(shape->s_cls()) << " not treated." << std::endl;
}

inline const std::string& insh_geo_field_help() {
  static const std::string s_help("\
geo_field: geo_field volume field\n\
  Get field value of a volume.\n\
  Example:\n\
    geo_field wc rmax\n\
");
  return s_help;
}

///////////////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////////////////////

#define INLIB_RROOT_INSH_CLASSES(a__holder,a__insh,a__manager)\
  INLIB_INSH_CLASS_CMD(a__holder,geo_print,\
                       inlib::rroot::insh_geo_print(a__insh,a__manager,a_args),inlib::rroot::insh_geo_print_help())\
  INLIB_INSH_CLASS_CMD(a__holder,geo_tree,\
                       inlib::rroot::insh_geo_tree(a__insh,a__manager,a_args),inlib::rroot::insh_geo_tree_help())\
  INLIB_INSH_CLASS_CMD(a__holder,geo_field,\
                       inlib::rroot::insh_geo_field(a__insh,a__manager,a_args),inlib::rroot::insh_geo_field_help())

#define INLIB_RROOT_INSH_ADDS(a__insh,a__holder)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,geo_print)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,geo_tree)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,geo_field)

}}

#endif
