// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_args2style
#define inlib_sg_args2style

#include "style_colormap"
#include "style"
#include "../args"

namespace inlib {
namespace sg {

inline void args2style(std::ostream& a_out,const cmaps_t& a_cmaps,const args& a_args,style& a_style) {

 {std::string svalue;
  if(a_args.find("-color",svalue)) {
    colorf _value;
    if(!find_color(a_cmaps,svalue,_value)) {
      a_out << "inlib::sg::args2style : " << svalue << " is not a color." << std::endl;
    } else {
      a_style.color = _value;
    }
  }}

 {std::string svalue;
  if(a_args.find("-point_size",svalue)) {
    float _value;
    if(!to<float>(svalue,_value)) {
      a_out << "inlib::sg::args2style : " << svalue << " is not a float." << std::endl;
    } else {
      a_style.point_size  = _value;
    }
  }}

 {std::string svalue;
  if(a_args.find("-line_width",svalue)) {
    float _value;
    if(!to<float>(svalue,_value)) {
      a_out << "inlib::sg::args2style : " << svalue << " is not a float." << std::endl;
    } else {
      a_style.line_width  = _value;
    }
  }}

 {std::string svalue;
  if(a_args.find("-marker_size",svalue)) {
    float _value;
    if(!to<float>(svalue,_value)) {
      a_out << "inlib::sg::args2style : " << svalue << " is not a float." << std::endl;
    } else {
      a_style.marker_size  = _value;
    }
  }}

 {std::string svalue;
  if(a_args.find("-marker_style",svalue)) {
    marker_style _value;
    if(!smarker_style(svalue,_value)) {
      a_out << "inlib::sg::args2style : " << svalue << " is not a marker_style." << std::endl;
    } else {
      a_style.marker_style = _value;
    }
  }}

 {std::string svalue;
  if(a_args.find("-painting",svalue)) {
    painting_policy _value;
    if(!spainting_policy(svalue,_value)) {
      a_out << "inlib::sg::args2style : " << svalue << " is not a painting_policy." << std::endl;
    } else {
      a_style.painting = _value;
    }
  }}

 {std::string svalue;
  if(a_args.find("-pickable",svalue)) {
    bool _value;
    if(!to(svalue,_value)) {
      a_out << "inlib::sg::args2style : " << svalue << " is not a bool." << std::endl;
    } else {
      a_style.pickable = _value;
    }
  }}

 {std::string svalue;
  if(a_args.find("-cut",svalue)) a_style.cut = svalue;}

 {std::string svalue;
  if(a_args.find("-color_mapping",svalue)) a_style.color_mapping = svalue;} //cowork with -painting=by_value.

 {std::string svalue;
  if(a_args.find("-coloring",svalue)) a_style.coloring = svalue;}

 {std::string svalue;
  if(a_args.find("-modeling",svalue)) a_style.modeling = svalue;}

 {std::string svalue;
  if(a_args.find("-title",svalue)) a_style.title = svalue;}

}

}}

#include "../xml/styles"

namespace inlib {
namespace sg {

inline void get_style(xml::styles& a_styles,const std::string& a_name,args& a_args,style& a_style) {
  if(a_name.size()) {
    if(!a_styles.res_sg_style<style>(a_name,a_style)) {
      a_styles.out() << "inlib::sg::get_style(2) : warning : style " << sout(a_name) << " not found." << std::endl;
    }
  }
  args2style(a_styles.out(),a_styles.cmaps(),a_args,a_style);
}

}}

#endif
