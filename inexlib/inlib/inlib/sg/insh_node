// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_insh_node
#define inlib_insh_node

#include "../ishell"
#include "../args"
#include "../svar"
#include "../sort"

#include "object_manager"

#include "cube"
#include "sphere"

#include "search"

//#include "dummy_freetype"
//#include "text"

namespace inlib {
namespace sg {

inline bool is_cube(const std::string& a_s) {
  if(a_s==cube::s_class()) return true;
  if(a_s=="cube") return true;
  return false;
}
inline bool is_sphere(const std::string& a_s) {
  if(a_s==sphere::s_class()) return true;
  if(a_s=="rbwd") return true;
  return false;
}

inline void insh_node_create(ishell& a_insh,object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);

  if(_args.is_arg("-classes")) {
    a_insh.out_begin();
    a_insh.out("cube",true);
    a_insh.out("sphere",true);
    return;
  }

  std::string sname;
  if(!_args.first_not_hyphen(sname)) {
    a_insh.warn("node_create : no name given.");
    return;
  }
  if(!is_C_variable(sname)) {
    a_insh.warn("node_create : name "+sout(sname)+" must have the syntax of a C variable.");
    return;
  }

  std::string sclass;
  _args.find("-class",sclass,cube::s_class());

  bool warn = _args.is_arg("-no_warn")?false:true;

  if(is_cube(sclass)) {
    node* _node = new cube;
    a_mgr.manage_object<node>(_node,sname,true,true,warn); //it must be <done>, so that insh_search_node works.
  } else if(is_sphere(sclass)) {
    node* _node = new sphere;
    a_mgr.manage_object<node>(_node,sname,true,true,warn);
    /*
  } else if(sclass==inlib::sg::text::s_class()) {
    dummy_freetype* _ttf = new dummy_freetype;
    node* _node = new text(*_ttf);
    a_mgr.manage_object<node>(_node,sname,true,true,warn);
    */
  } else {
    a_insh.warn("node_create : unknow class "+sout(sclass)+".");
  }
}

inline const std::string& insh_node_create_help() {
  static const std::string s_help("\
node_create: node_create [-classes,-no_warn,-class,] [name]\n\
  Create a named and managed inlib::sg::node.\n\
  The name must have the syntax of a C variable.\n\
  Note that the node is not put under a viewer scene graph.\n\
  It is deposited under the 'object manager' which is intended to\n\
  keep track of various objects not necessarily visualisable by themsleves\n\
  as random generators or histograms.\n\
  If an object with same name already exist it is deleted.\n\
  -no_warn to not warn in case of overwriting an existing object.\n\
  -class=string class of the node to createa (default is inlib::sg::cube).\n\
  -classes print the available classes.\n\
  Example:\n\
    node_create -classes\n\
    node_create  my_cube # create a cube named my_cube.\n\
    node_create -class=sphere my_cube\n\
");
  return s_help;
}

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

inline void insh_node_ls(ishell& a_insh,object_manager& a_mgr,const std::vector<std::string>& a_args) {
  std::vector<std::string> vs;
  inlib_vforcit(node*,a_mgr.nodes().children(),it) {
    sg::base_holder* bh = safe_cast<node,base_holder>(*(*it));
    if(bh) vs.push_back(bh->name());
  }
  sort::sort(vs);
  a_insh.unix_print(vs);
}

inline const std::string& insh_node_ls_help() {
  static const std::string s_help("\
node_ls: node_ls\n\
  List managed nodes.\n\
  Example:\n\
    node_ls\n\
");
  return s_help;
}

inline void insh_node_remove(ishell& a_insh,object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);
  if(_args.is_arg("-all")) {
    a_mgr.clear();
    return;
  }
  std::string name;
  if(!_args.first_not_hyphen(name)) {
    a_insh.warn("node_remove : no name given.");
    return;
  }
  a_mgr.remove_object(name,true,true);
}

inline const std::string& insh_node_remove_help() {
  static const std::string s_help("\
node_remove: node_remove [-all] name\n\
  Remove managed node.\n\
  -all remove all managed nodes.\n\
  Example:\n\
    node_ls\n\
    node_create -class=cube my_cube\n\
    node_create -class=sphere my_sphere\n\
    node_ls\n\
    node_remove my_cube\n\
    node_ls\n\
    node_remove -all\n\
    node_ls\n\
");
  return s_help;
}

inline node* insh_search_node(const std::string& a_header,ishell& a_insh,object_manager& a_mgr,args& a_args) {
 {std::string name;
  if(a_args.first_not_hyphen(name)) {
    node* _node = a_mgr.find_object<node>(name);
    if(!_node) {
      a_insh.warn(a_header+" : object "+sout(name)+" not found.");
      return 0;
    }
    return _node;
  }}
 {std::string source;
  if(a_args.find("-source",source)) {
    node* _source = a_mgr.find_source(source);
    if(!_source) {
      a_insh.warn(a_header+" : source node "+sout(source)+" not found.");
      return 0;
    }
    std::string sclass;
    if(!a_args.find("-class",sclass)) {
      a_insh.warn(a_header+" : no class given.");
      return 0;
    }
    node* _node = find_first_node_with_class(a_insh.out(),*_source,sclass);
    if(!_node) {
      a_insh.warn(a_header+" : node of class "+sout(sclass)+" not found under source "+sout(source)+".");
      return 0;
    }
    return _node;
  }}
  a_insh.warn(a_header+" : node not found.");
  return 0;
}

inline void insh_node_set_field(ishell& a_insh,object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);
  node* _node = insh_search_node("node_set_field",a_insh,a_mgr,_args);
  if(!_node) return;
  if(_args.is_arg("-fields")) {
    _node->dump_field_descs(a_insh.out());
    return;
  }
  std::string sfield;
  if(!_args.find("-field",sfield)) {
    a_insh.warn("node_set_field : -field not found.");
    return;
  }
  std::string svalue;
  if(!_args.find("-value",svalue)) {
    a_insh.warn("node_set_field : -value not found.");
    return;
  }
  field* fd = _node->find_field_by_name(sfield);
  if(!fd) {
    a_insh.warn("node_set_field : field "+sout(sfield)+" not found on node of class "+sout(_node->s_cls())+".");
    return;
  }
  if(!fd->s2value(svalue)) {
    a_insh.warn("node_set_field : can't set value "+sout(svalue)+" for field "+sfield+" for node of class "+sout(_node->s_cls())+".");
    return;
  }
}

inline const std::string& insh_node_set_field_help() {
  static const std::string s_help("\
node_set_field: node_set_field [-fields,-field,-value] name\n\
  Set value of a field of a named managed node.\n\
  -fields to print description of node fields.\n\
  -field=string field to set.\n\
  -value=[string,number] value to set.\n\
  Example:\n\
    node_create -class=cube my_cube\n\
    node_set_field -fields my_cube\n\
    node_set_field -field=inlib::sg::cube.width -value=100 my_cube\n\
");
  return s_help;
}

inline void insh_node_get_field(ishell& a_insh,object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);
  node* _node = insh_search_node("node_get_field",a_insh,a_mgr,_args);
  if(!_node) return;
  if(_args.is_arg("-fields")) {
    _node->dump_field_descs(a_insh.out());
    return;
  }
  std::string sfield;
  if(!_args.find("-field",sfield)) {
    a_insh.warn("node_set_field : -field not found.");
    return;
  }
  field* fd = _node->find_field_by_name(sfield);
  if(!fd) {
    a_insh.warn("node_get_field : field "+sout(sfield)+" not found on node of class "+sout(_node->s_cls())+".");
    return;
  }
  std::string s;
  if(!fd->s_value(s)) {
    a_insh.warn("node_get_field : can't get value for field "+sout(sfield)+" for node of class "+sout(_node->s_cls())+".");
    return;
  }
  a_insh.out(s);
}

inline const std::string& insh_node_get_field_help() {
  static const std::string s_help("\
node_get_field: node_get_field [-field,-fields] name\n\
  Get value of a field of a named managed node.\n\
  -field=string field to get.\n\
  Example:\n\
    node_create -class=cube my_cube\n\
    node_get_field -field=inlib::sg::cube.width my_cube\n\
");
  return s_help;
}

///////////////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////////////////////

#define INLIB_NODE_INSH_CLASSES(a__holder,a__insh,a__manager)\
  INLIB_INSH_CLASS_CMD(a__holder,node_create,\
                       inlib::sg::insh_node_create(a__insh,a__manager,a_args),inlib::sg::insh_node_create_help())\
  INLIB_INSH_CLASS_CMD(a__holder,node_remove,\
                       inlib::sg::insh_node_remove(a__insh,a__manager,a_args),inlib::sg::insh_node_remove_help())\
  INLIB_INSH_CLASS_CMD(a__holder,node_ls,\
                       inlib::sg::insh_node_ls(a__insh,a__manager,a_args),inlib::sg::insh_node_ls_help())\
  INLIB_INSH_CLASS_CMD(a__holder,node_set_field,\
                       inlib::sg::insh_node_set_field(a__insh,a__manager,a_args),inlib::sg::insh_node_set_field_help())\
  INLIB_INSH_CLASS_CMD(a__holder,node_get_field,\
                       inlib::sg::insh_node_get_field(a__insh,a__manager,a_args),inlib::sg::insh_node_get_field_help())

#define INLIB_NODE_INSH_ADDS(a__insh,a__holder)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,node_create)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,node_remove)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,node_ls)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,node_set_field)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,node_get_field)

}}

#endif
