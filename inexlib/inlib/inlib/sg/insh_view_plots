// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_insh_view_plots
#define inlib_sg_insh_view_plots

#include "view_plots"

namespace inlib {
namespace sg {

inline void insh_plots_create(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("plots_create :");
  if(search_plots_in_static_scene(a_gv)) return; //done.
  plots* _plots;matrix* _matrix;event_dispatcher* _edp;
  if(!create_evd_sg_plots(a_gv,adjust_view,_plots,_matrix,_edp)) {
    a_gv.insh().warn(s_header+" create_evd_sg_plots() failed.");
    return;
  }
  /*
  args _args(a_args);
  std::string name;
  if(_args.first_not_hyphen(name)) {
    if(!is_C_variable(name)) {
      a_gv.insh().warn("plots_create : name \""+name+"\" must have the syntax of a C variable.");
      return;
    }
    _plots->set_name(name);
  }
  */
}

inline const std::string& insh_plots_create_help() {
  static const std::string s_help("\
plots_create: plots_create\n\
  If not done, create a inlib::sg::plots in the static scene graph.\n\
  Example:\n\
    plots_create\n\
");
  return s_help;
}

inline void insh_plots_full_window(gui_viewer& a_gv,const std::vector<std::string>&) {
  plotarea* _plotarea = cast_plotarea(a_gv);
  if(_plotarea) _plotarea->hide_plots();
  a_gv.hide_main_menu();
  view_evd* _evd = cast_view_evd(a_gv);
  if(_evd) {
    _evd->static_sg().clear();
    _evd->dynamic_sg().clear();
  }
  if(!get_sg_plots(a_gv)) {
    a_gv.insh().warn("plots_full_window : sg::plots not found.");
    return;
  }
}

inline const std::string& insh_plots_full_window_help() {
  static const std::string s_help("\
plots_full_window: plots_full_window\n\
  Set scene ready for full window plotting.\n\
  Example:\n\
    plots_full_window\n\
");
  return s_help;
}

inline void insh_plots_set_grid(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plots_set_grid :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  if((a_args.size()!=2)&&(a_args.size()!=3)) {
    a_gv.insh().warn(s_header+" two or three arguments expected.");
    return;
  }
  unsigned int cols;
  if(!a_gv.insh().get_arg_uint(s_header,a_args[0],cols)) return;
  unsigned int rows;
  if(!a_gv.insh().get_arg_uint(s_header,a_args[1],rows)) return;
  bool transfer = false;
  if(a_args.size()==3) {
    if(!a_gv.insh().get_arg_bool(s_header,a_args[2],transfer)) return;
  }
  _plots->set_regions(cols,rows,transfer);
}

inline const std::string& insh_plots_set_grid_help() {
  static const std::string s_help("\
plots_set_grid: plots_set_grid cols rows [transfer]\n\
  Set the grid of inlib::sg::plotters in the first inlib::sg::plots node found in the scene.\n\
  The optional boolean transfer argument (false by default) says if the content of\n\
  previous plotters are transfered in the plotter in the new grid.\n\
  Example:\n\
    plots_set_grid 2 2  # then four plotters are created.\n\
    plots_set_grid 2 3 true\n\
");
  return s_help;
}

inline void insh_plots_clear(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plots_clear :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  _plots->clear();
}

inline void insh_plots_current_to_one(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plots_current_to_one :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  _plots->current_to_one();
}

inline void insh_plots_set_current_plotter(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plots_set_current_plotter :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  if(a_args.size()!=1) {
    a_gv.insh().warn(s_header+" one arguments expected.");
    return;
  }
  unsigned int index;
  if(!a_gv.insh().get_arg_uint(s_header,a_args[0],index)) return;
  _plots->set_current_plotter(index);
}

inline const std::string& insh_plots_set_current_plotter_help() {
  static const std::string s_help("\
plots_set_current_plotter: plots_set_current_plotter index\n\
  Set the current plotter given its index in the grid of the first sg::plots node found in the scene.\n\
  index is in [0,number of plotters[.\n\
  Example:\n\
    plots_set_grid 2 2           # then four plotters.\n\
    plots_set_current_plotter 3  # then the bottom right plotter will be the current one.\n\
");
  return s_help;
}

inline void insh_plots_next(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plots_next :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  _plots->next();
}

inline const std::string& insh_plots_next_help() {
  static const std::string s_help("\
plots_next: plots_next\n\
  Set the current plotter to be the next one in the grid.\n\
  If at end (bottom right plotter) current plotter is set to be the upper left one.\n\
  Example:\n\
    plots_set_grid 2 2  # then four plotters. Current plotter is the top left one.\n\
    plots_next  # set current to top right.\n\
    plots_set_current_plotter 3  # set current to bottom right.\n\
    plots_next  # set to top left.\n\
");
  return s_help;
}

inline void insh_plotter_set_field(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plotter_set_field :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  if(a_args.size()!=2) {
    a_gv.insh().warn(s_header+" two arguments expected.");
    return;
  }
  plotter& plotter = _plots->current_plotter();
  const std::string& field = a_args[0];
  const std::string& value = a_args[1];
  if(!plotter.set_from_string(a_gv.out(),a_gv.styles().cmaps(),field,value)) {
    a_gv.insh().warn("plotter.set_from_field("+sout(field)+","+sout(value)+") failed.");
    return;
  }
}

inline const std::string& insh_plotter_set_field_help() {
  static const std::string s_help("\
plotter_set_field: plotter_set_field field value\n\
  Set a field or style field in the current plotter.\n\
  Field examples:\n\
    title_automated, title, bins_style.0.color\n\
    x_axis.divisions, x_axis.line_style.color\n\
    background_style.back_color\n\
  Example:\n\
    plots_set_grid 2 2           # then four plotters.\n\
    plots_set_current_plotter 3  # then the bottom right plotter will be the current one.\n\
    plotter_set_field title_automated false\n\
    plotter_set_field title 'my title'\n\
    plotter_set_field bins_style.0.color blue\n\
");
  return s_help;
}


inline void insh_plotter_clear(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plotter_clear :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  plotter& plotter = _plots->current_plotter();
  plotter.clear();
}
inline const std::string& insh_plotter_clear_help() {
  static const std::string s_help("\
plotter_clear: plotter_clear\n\
  Clear the current plotter.\n\
");
  return s_help;
}

inline void insh_plotter_reset_style(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plotter_reset_style :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  _plots->current_plotter().reset_style(true);
  _plots->touch(); //to apply indirectly plots::set_plotter_layout() on the plotter.
}

inline void insh_plotter_set_style(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plotter_set_style :");
  plots* _plots = search_plots(a_gv);
  if(!_plots) {
    a_gv.insh().warn(s_header+" no inlib::sg::plots node found.");
    return;
  }
  if(a_args.size()!=1) {
    a_gv.insh().warn(s_header+" one arguments expected.");
    return;
  }
  style_from_res(a_gv.styles(),a_args[0],_plots->current_plotter(),false);
}

inline void insh_plotter_print_customization(gui_viewer& a_gv) {
  dummy_freetype _ttf;
  plotter _plotter(_ttf);
  _plotter.print_available_customization(a_gv.out());
}

inline void insh_plotter_print_style(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("inlib::sg::insh_plotter_print_style :");
  if(a_args.size()!=1) {
    a_gv.insh().warn(s_header+" one arguments expected.");
    return;
  }
  const std::string& arg0 = a_args[0];
  if(!a_gv.styles().print_plotter_style(a_gv.out(),arg0)) {
    a_gv.insh().warn("style "+arg0+" not found.");
    return;
  }
}
inline const std::string& insh_plotter_print_style_help() {
  static const std::string s_help("\
plotter_print_style: plotter_print_style\n\
  Print a plotter style.\n\
  Example:\n\
    plotter_print_style ROOT_default\n\
  See also: style_load_file.\n\
");
  return s_help;
}

inline void insh_histo_plot_complete(gui_viewer& a_gv,const std::string& a_begin,std::vector<std::string>& a_names) {
  if(a_begin.empty()) {
    a_names.clear();
    std::string name;
    inlib_vforcit(sg::node*,a_gv.object_manager().nodes().children(),it) {
      if(histo::insh_node_is_histo(*(*it),name)) a_names.push_back(name);
    }
    sort::sort(a_names);
  } else {
    std::vector<std::string> names;
    names.clear();
    std::string name;
    inlib_vforcit(sg::node*,a_gv.object_manager().nodes().children(),it) {
      if(histo::insh_node_is_histo(*(*it),name)) names.push_back(name);
    }
    a_names.clear();
    inlib_vforcit(std::string,names,it) {if(is_beg(*it,a_begin)) a_names.push_back(*it);}
    sort::sort(a_names);
  }
}

inline void insh_histo_plot(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("histo_plot :");
  plots* plots = search_plots(a_gv);
  if(!plots) {
    a_gv.insh().warn(s_header+" no sg::plots node found.");
    return;
  }
  plotter& _plotter = plots->current_plotter();
  _plotter.clear();

  args _args(a_args);
  std::string name;
  if(!_args.first_not_hyphen(name)) {
    a_gv.insh().warn(s_header+" no name given.");
    return;
  }
  base_holder* _node = a_gv.object_manager().find_base_holder(name);
  if(!_node) {
    a_gv.insh().warn(s_header+" "+name+" not found.");
    return;
  }

  std::string sinfos_name;
  INLIB_ISHELL_GET_ARG_STRING(_args,infos_name)

  if(histo::h1d* _h1d = cast_holder_object<histo::h1d>(*_node)) {
    //setup_plotter(a_gv.out(),_plotter);
    plottable* _plottable = new h1d2plot_cp(*_h1d);
    if(sinfos_name.size()) _plottable->set_name(sinfos_name);
    _plotter.add_plottable(_plottable);
  } else if(histo::h2d* _h2d = cast_holder_object<histo::h2d>(*_node)) {
    plottable* _plottable = new h2d2plot_cp(*_h2d);
    if(sinfos_name.size()) _plottable->set_name(sinfos_name);
    _plotter.add_plottable(_plottable);
//} else if(histo::h3d* _h3d = cast_holder_object<histo::h3d>(*_node)) {
//  plottable* _plottable = new h3d2plot_cp(*_h3d);
//  if(sinfos_name.size()) _plottable->set_name(sinfos_name);
//  _plotter.add_plottable(_plottable);
  } else if(histo::p1d* _p1d = cast_holder_object<histo::p1d>(*_node)) {
    plottable* _plottable = new p1d2plot_cp(*_p1d);
    if(sinfos_name.size()) _plottable->set_name(sinfos_name);
    _plotter.add_plottable(_plottable);
  } else {
    a_gv.insh().warn(s_header+" "+name+" has an unknown object class.");
    return;
  }
  a_gv.hide_main_menu();
}

inline const std::string& insh_histo_plot_help() {
  static const std::string s_help("\
histo_plot: histo_plot [-infos_name] name\n\
  Plot named managed histogram.\n\
  -infos_name=string string to be put in the 'Name' entry of the infos box.\n\
  Example:\n\
    histo_create -xbins=20 -xmin=-5 -xmax=5 h_1\n\
    histo_fill -from=rgaussd -mean=0 -std_dev=1 -entries=10000 h_1\n\
    histo_plot h_1\n\
");
  return s_help;
}

class val_func_scripted : public val_func, public scripted {
  typedef val_func parent_val_func;
  typedef scripted parent_scripted;
public:
  INLIB_SCLASS(inlib::sg::val_func_scripted)
public: //ival_func.
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<val_func_scripted>(this,a_class)) return p;
    return parent_val_func::cast(a_class);
  }
  virtual bool eval(const args& a_args,inlib::value& a_return,std::string& a_error) {
    //if(a_args.size()!=m_num_args) return false;
    if(a_args.size()!=1) {
      m_out << "val_func_scripted::eval : one arg expected." << std::endl;
      a_return.set(0.0);
      return false;
    }
    if(!a_args[0].to_double(m_xs[0])) {
      m_out << "val_func_scripted::eval : can't convert inlib::value to double." << std::endl;
      a_return.set(0.0);
      return false;
    }
    if(!parent_scripted::value(m_xs,m_dr,m_serr)) {
      m_out << "val_func_scripted::eval : parent_scripted::value() failed. Error " << sout(m_serr) << "." << std::endl;
      a_return.set(0.0);
      return false;
    }
    a_return.set(m_dr);
    return true;
  }
  virtual ival_func* copy() const { return new val_func_scripted(*this);}
public:
  val_func_scripted(std::ostream& a_out,const std::string& a_name,const std::string& a_script)
  :parent_val_func(a_name,1)
  ,parent_scripted(a_out,a_script)
  {
    if(!parent_scripted::is_valid()) {
      m_out << "val_func_scripted::cstor : bad script." << std::endl;
    }
    m_xs.resize(1);
  }
  virtual ~val_func_scripted(){}
public:
  val_func_scripted(const val_func_scripted& a_from)
  :ival_func(a_from),parent_val_func(a_from),parent_scripted(a_from)
  {
    m_xs.resize(1);
  }
  val_func_scripted& operator=(const val_func_scripted& a_from){
    parent_val_func::operator=(a_from);
    parent_scripted::operator=(a_from);
    return *this;
  }
private:
  std::string m_serr;
  std::vector<double> m_xs;
  double m_dr;
};

class plot_ival_func : public virtual plot_func {
  typedef plot_func parent;
public:
  plot_ival_func(ival_func& a_func)
  :m_ival_func(a_func)
  {
    m_args.resize(1);
  }
  virtual ~plot_ival_func(){}
public:
  plot_ival_func(const plot_ival_func& a_from)
  :parent(a_from)
  ,m_ival_func(a_from.m_ival_func)
  {
    m_args.resize(1);
  }
  plot_ival_func& operator=(const plot_ival_func&){return *this;}
public:
  bool in_domain(double) const {return true;}
  double value(double a_x) const {
    plot_ival_func& self = const_cast<plot_ival_func&>(*this);
    self.m_args[0].set(a_x);
    if(!m_ival_func.eval(m_args,self.m_vr,self.m_serr)) {}
    if(!m_vr.to_double(self.m_dr)) {}
    return m_dr;
  }
  unsigned int xdomain_number_of_steps() const {return 0;} //decided by the plotter.curve_number_of_points.
  double xdomain_min() const {return -1;}
  double xdomain_max() const {return 1;}
  unsigned int ydomain_number_of_steps() const {return 0;} //decided by the plotter.curve_number_of_points.
  double ydomain_min() const {return -1;}
  double ydomain_max() const {return 1;}
public:
  ival_func& m_ival_func;
private: //opt:
  std::vector<inlib::value> m_args;
  inlib::value m_vr;
  std::string m_serr;
  double m_dr;
};

INLIB_GLOBAL_STRING(functions)

inline val_funcs* find_val_funcs(object_manager& a_mgr) {
  val_funcs* funcs = a_mgr.find_object<val_funcs>(s_functions());
  if(!funcs) {
    funcs = new val_funcs();
    a_mgr.manage_object<val_funcs>(funcs,s_functions(),false,false,false);
  }
  return a_mgr.find_object<val_funcs>(s_functions());
}

inline void insh_func_plot_complete(gui_viewer& a_gv,const std::string& a_begin,std::vector<std::string>& a_names) {
  val_funcs* funcs = find_val_funcs(a_gv.object_manager());
  if(!funcs) {a_names.clear();return;}
  if(a_begin.empty()) {
    a_names.clear();
    std::string name;
    inlib_vforcit(ival_func*,funcs->funcs(),it) a_names.push_back((*it)->name());
    sort::sort(a_names);
  } else {
    std::vector<std::string> names;
    names.clear();
    std::string name;
    inlib_vforcit(sg::node*,a_gv.object_manager().nodes().children(),it) {
      inlib_vforcit(ival_func*,funcs->funcs(),it) names.push_back((*it)->name());
    }
    a_names.clear();
    inlib_vforcit(std::string,names,it) {if(is_beg(*it,a_begin)) a_names.push_back(*it);}
    sort::sort(a_names);
  }
}

inline void insh_func_plot(gui_viewer& a_gv,const std::vector<std::string>& a_args) {
  static const std::string s_header("func_plot :");
  plots* plots = search_plots(a_gv);
  if(!plots) {
    a_gv.insh().warn(s_header+" no sg::plots node found.");
    return;
  }
  plotter& _plotter = plots->current_plotter();
  _plotter.clear();
  val_funcs* funcs = find_val_funcs(a_gv.object_manager());
  if(!funcs) {
    a_gv.insh().warn(s_header+" can't find "+sout("functions")+"in object managers.");
    return;
  }

  args _args(a_args);
  std::string name;
  if(!_args.first_not_hyphen(name)) {
    a_gv.insh().warn(s_header+" no name given.");
    return;
  }

  std::string sscript;
  INLIB_ISHELL_GET_ARG_STRING(_args,script)

  ival_func* func = funcs->find(name);

  if(sscript.size()) {
    if(!func) {
      val_func_scripted* _scripted = new val_func_scripted(a_gv.out(),name,sscript);
      if(!_scripted->is_valid()) {
        a_gv.insh().warn(s_header+" bad script "+sout(sscript)+".");
        delete _scripted;
        return;
      }
      func = _scripted;
      funcs->add(func);
    } else {
      val_func_scripted* _scripted = safe_cast<ival_func,val_func_scripted>(*func);
      if(!_scripted) {
        a_gv.insh().warn(s_header+" existing function "+sout(name)+" not a scripted function.");
        return;
      }
      if(!_scripted->initialize(sscript)) {
        a_gv.insh().warn(s_header+" bad script "+sout(sscript)+".");
        //if(funcs->remove(func)) delete func; //we can't delete, since it may be plotted.
        //return;
      }
    }
  } else {
    if(!func) {
      a_gv.insh().warn(s_header+" function "+sout(name)+" not found.");
      return;
    }
  }

  plot_ival_func* pfunc = new plot_ival_func(*func);

  uint32 steps = 100;
  INLIB_ISHELL_GET_ARG_UINT(a_gv.insh(),_args,func_plot,steps,)
  double xmin = -1;
  INLIB_ISHELL_GET_ARG_DOUBLE(a_gv.insh(),_args,func_plot,xmin,)
  double xmax = 1;
  INLIB_ISHELL_GET_ARG_DOUBLE(a_gv.insh(),_args,func_plot,xmax,)
  std::string sinfos_name;
  INLIB_ISHELL_GET_ARG_STRING(_args,infos_name)

  //setup_plotter(a_gv.out(),_plotter);
  plottable* _plottable = new f1d2plot_cp<plot_ival_func>(*pfunc);
  if(sinfos_name.size()) _plottable->set_name(sinfos_name);

  _plotter.add_plottable(_plottable);

  _plotter.x_axis_automated = false;
  _plotter.x_axis_min = xmin;
  _plotter.x_axis_max = xmax;
  _plotter.curve_number_of_points = steps;

  delete pfunc;

  a_gv.hide_main_menu();
}

inline const std::string& insh_func_plot_help() {
  static const std::string s_help("\
func_plot: func_plot [-infos_name,-xmin,-xmax,-steps,-script] name\n\
  Plot named function.\n\
  -infos_name=string string to be put in the 'Name' entry of the infos box.\n\
  -xmin=real plotter x axis min value (default is -1).\n\
  -xmax=real plotter x axis max value (default is 1).\n\
  -steps=uint number of steps when evaluating the function (default is 100).\n\
  -script=string.\n\
  You can use the completion to get the known function names.\n\
  If using -script, a function will be created that will use a\n\
  simple C instruction interpreter.\n\
  Example:\n\
    func_plot cos\n\
    func_plot -script='exp(cos(10*x))' my_func\n\
");
  return s_help;
}

}}

#define INLIB_VIEW_PLOTS_INSH_CLASSES(a__holder)\
  INLIB_INSH_CLASS_CMD(a__holder,paw_set_camera,paw_set_camera(m_holder),"paw_set_camera: paw_set_camera\n  Set an ortho camera to have a similar plot viewing as PAW.\n  Example:\n    paw_set_camera\n")\
\
  INLIB_INSH_CLASS_CMD(a__holder,plots_create,insh_plots_create(m_holder,a_args),inlib::sg::insh_plots_create_help())\
  INLIB_INSH_CLASS_CMD(a__holder,plots_set_grid,insh_plots_set_grid(m_holder,a_args),inlib::sg::insh_plots_set_grid_help())\
  INLIB_INSH_CLASS_CMD(a__holder,plots_next,insh_plots_next(m_holder,a_args),inlib::sg::insh_plots_next_help())\
  INLIB_INSH_CLASS_CMD(a__holder,plots_set_current_plotter,insh_plots_set_current_plotter(m_holder,a_args),inlib::sg::insh_plots_set_current_plotter_help())\
  INLIB_INSH_CLASS_CMD(a__holder,plots_clear,insh_plots_clear(m_holder,a_args),"plots_clear: plots_clear\n  Clear all plotters.\n")\
  INLIB_INSH_CLASS_CMD(a__holder,plots_current_to_one,insh_plots_current_to_one(m_holder,a_args),"plots_current_to_one: plots_current_to_one\n  Have the current plotter in a 1x1 grid.\n")\
  INLIB_INSH_CLASS_CMD(a__holder,plots_full_window,insh_plots_full_window(m_holder,a_args),inlib::sg::insh_plots_full_window_help())\
\
  INLIB_INSH_CLASS_CMD(a__holder,plotter_set_field,insh_plotter_set_field(m_holder,a_args),inlib::sg::insh_plotter_set_field_help())\
  INLIB_INSH_CLASS_CMD(a__holder,plotter_clear,insh_plotter_clear(m_holder,a_args),inlib::sg::insh_plotter_clear_help())\
  INLIB_INSH_CLASS_CMD(a__holder,plotter_reset_style,insh_plotter_reset_style(m_holder,a_args),"plotter_reset_style: plotter_reset_style\n  Reset the current plotter style.\n")\
  INLIB_INSH_CLASS_CMD(a__holder,plotter_set_style,insh_plotter_set_style(m_holder,a_args),"plotter_set_style: plotter_set_style style\n  Set the current plotter style.\n  Example:\n    plotter_set_style ROOT_default\n    plotter_set_style hippodraw\n  See also: plotter_list_styles, style_load_file\n")\
\
  INLIB_INSH_CLASS_CMD(a__holder,plotter_list_styles,m_holder.styles().list_plotter_styles(m_holder.out()),"plotter_list_styles: plotter_list_styles\n  List available plotter styles.\n  See also: style_load_file.\n")\
  INLIB_INSH_CLASS_CMD(a__holder,plotter_print_customization,insh_plotter_print_customization(m_holder),"plotter_print_customization: plotter_print_customization\n  Print available plotter customization items.\n")\
  INLIB_INSH_CLASS_CMD(a__holder,plotter_print_style,insh_plotter_print_style(m_holder,a_args),inlib::sg::insh_plotter_print_style_help())\
\
  INLIB_INSH_CLASS_CMD_COMPLETE(a__holder,histo_plot,insh_histo_plot(m_holder,a_args),inlib::sg::insh_histo_plot_help(),insh_histo_plot_complete)\
  INLIB_INSH_CLASS_CMD_COMPLETE(a__holder,func_plot,insh_func_plot(m_holder,a_args),inlib::sg::insh_func_plot_help(),insh_func_plot_complete)

#define INLIB_VIEW_PLOTS_INSH_ADDS(a__insh,a__holder)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,paw_set_camera)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plots_create)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plots_set_grid)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plots_next)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plots_set_current_plotter)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plots_clear)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plots_current_to_one)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plots_full_window)\
\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plotter_set_field)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plotter_clear)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plotter_reset_style)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plotter_set_style)\
\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plotter_list_styles)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plotter_print_customization)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,plotter_print_style)\
\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_plot)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,func_plot)

#endif
