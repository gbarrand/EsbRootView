// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_histo_insh
#define inlib_histo_insh

#include "../ishell"
#include "../args"
#include "../svar"

#include "../sg/object_manager"

#include "h1d"
#include "h2d"
#include "h3d"
#include "p1d"
#include "p2d"

#include "../randd"
#include "../file_format"

namespace inlib {
namespace histo {

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
inline bool is_rgaussd(const std::string& a_s) {
  if(a_s==rgaussd::s_class()) return true;
  if(a_s=="rgaussd") return true;
  return false;
}
inline bool is_rbwd(const std::string& a_s) {
  if(a_s==rbwd::s_class()) return true;
  if(a_s=="rbwd") return true;
  return false;
}
inline bool is_rbinomiald(const std::string& a_s) {
  if(a_s==rbinomiald::s_class()) return true;
  if(a_s=="rbinomiald") return true;
  return false;
}
inline bool is_rexpd(const std::string& a_s) {
  if(a_s==rexpd::s_class()) return true;
  if(a_s=="rexpd") return true;
  return false;
}
inline bool is_rpoissd(const std::string& a_s) {
  if(a_s==rpoissd::s_class()) return true;
  if(a_s=="rpoissd") return true;
  return false;
}

inline void insh_random_create(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);

  if(_args.is_arg("-classes")) {
    a_insh.out_begin();
    a_insh.out("rgaussd",true);
    a_insh.out("rbwd",true);
    a_insh.out("rbinomiald",true);
    a_insh.out("rexpd",true);
    a_insh.out("rpoissd",true);
    return;
  }

  std::string sname;
  if(!_args.first_not_hyphen(sname)) {
    a_insh.warn("random_create : no name given.");
    return;
  }

  std::string sclass;
  _args.find("-class",sclass,rgaussd::s_class());

  bool warn = _args.is_arg("-no_warn")?false:true;

  uint32 seed;
  bool found_seed = _args.find<uint32>("-seed",seed,1);

  double std_dev = 1;
  INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,random_create,std_dev,)

  uint32 n = 1;
  INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,random_create,n,)
  double p = 0.5;
  INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,random_create,p,)
  double rate = 1;
  INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,random_create,rate,)
  double gamma = 1;
  INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,random_create,gamma,)

  if(is_rgaussd(sclass)) {
    double mean = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,random_create,mean,)
    rgaussd* r = new rgaussd(mean,std_dev);
    if(found_seed) r->set_seed(seed);
    a_mgr.manage_object<rgaussd>(r,sname,true,true,warn);

  } else if(is_rbinomiald(sclass)) {
    if((p<0)||(1<p)) {
      a_insh.warn("random_create : rbinomiald : p must be in [0,1].");
      p = 1;
      return;
    }
    rbinomiald* r = new rbinomiald(n,p);
    if(found_seed) r->set_seed(seed);
    a_mgr.manage_object<rbinomiald>(r,sname,true,true,warn);

  } else if(is_rexpd(sclass)) {
    rexpd* r = new rexpd(rate);
    if(found_seed) r->set_seed(seed);
    a_mgr.manage_object<rexpd>(r,sname,true,true,warn);

  } else if(is_rbwd(sclass)) {
    double mean = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,random_create,mean,)
    rbwd* r = new rbwd(mean,gamma);
    if(found_seed) r->set_seed(seed);
    a_mgr.manage_object<rbwd>(r,sname,true,true,warn);

  } else if(is_rpoissd(sclass)) {
    double mean = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,random_create,mean,)
    rpoissd* r = new rpoissd(mean);
    if(found_seed) r->set_seed(seed);
    a_mgr.manage_object<rpoissd>(r,sname,true,true,warn);

  } else {
    a_insh.warn("random_create : unknow class "+sout(sclass)+".");
  }
}

inline const std::string& insh_random_create_help() {
  static const std::string s_help("\
random_create: random_create [-classes,-class,-no_warn,] [name]\n\
  Create a named and managed random generator object.\n\
  The name must have the syntax of a C variable.\n\
  If an object with same name already exist it is deleted.\n\
  -no_warn to not warn in case of overwriting an existing object.\n\
  -class=string class of the object to createa (default is rgaussd).\n\
  -classes print the available classes.\n\
  According to the wanted class, various arguments can be passed.\n\
  If -class=rgaussd (random gauss):\n\
  -mean=real mean value (default is 0).\n\
  -std_dev=real standard deviation (default is 1).\n\
  If -class=rbwd (random breit-wigner):\n\
  -mean=real mean value (default is 0).\n\
  -gamma=real gamma (default is 1).\n\
  If -class=rbinomial:\n\
  -n=uint (default is 1).\n\
  -p=real (default is 0.5).\n\
  If -class=rexpd:\n\
  -rate=real (default is 1).\n\
  If -class=rpoissd (random poisson):\n\
  -mean=real (default is 1).\n\
  Example:\n\
    random_create -classes\n\
    random_create r_gaussd # create a rgaussd named r_gaussd.\n\
    random_create -class=rgaussd -mean=0 -std_dev=1 r_1\n\
");
  return s_help;
}

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

inline void insh_histo_create(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);

  if(_args.is_arg("-classes")) {
    a_insh.out_begin();
    a_insh.out("h1d",true);
    a_insh.out("h2d",true);
    a_insh.out("h3d",true);
    a_insh.out("p1d",true);
    a_insh.out("p2d",true);
    return;
  }

  std::string sname;
  if(!_args.first_not_hyphen(sname)) {
    a_insh.warn("histo_create : no name given.");
    return;
  }

  std::string sclass;
  _args.find("-class",sclass,h1d::s_class());

  bool warn = _args.is_arg("-no_warn")?false:true;

  if((sclass==h1d::s_class())||(sclass=="h1d")) {
    std::string stitle;
    INLIB_ISHELL_GET_ARG_STRING(_args,title)

    unsigned int xbins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,xbins,)
    double xmin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmin,)
    double xmax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmax,)

    h1d* h = new h1d(stitle,xbins,xmin,xmax);
    a_mgr.manage_object<h1d>(h,sname,true,true,warn);

  } else if(sclass==h2d::s_class()||(sclass=="h2d")) {
    std::string stitle;
    INLIB_ISHELL_GET_ARG_STRING(_args,title)

    unsigned int xbins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,xbins,)
    double xmin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmin,)
    double xmax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmax,)

    unsigned int ybins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,ybins,)
    double ymin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,ymin,)
    double ymax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,ymax,)

    h2d* h = new h2d(stitle,xbins,xmin,xmax,ybins,ymin,ymax);
    a_mgr.manage_object<h2d>(h,sname,true,true,warn);

  } else if(sclass==h3d::s_class()||(sclass=="h3d")) {
    std::string stitle;
    INLIB_ISHELL_GET_ARG_STRING(_args,title)

    unsigned int xbins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,xbins,)
    double xmin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmin,)
    double xmax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmax,)

    unsigned int ybins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,ybins,)
    double ymin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,ymin,)
    double ymax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,ymax,)

    unsigned int zbins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,zbins,)
    double zmin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,zmin,)
    double zmax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,zmax,)

    h3d* h = new h3d(stitle,xbins,xmin,xmax,ybins,ymin,ymax,zbins,zmin,zmax);
    a_mgr.manage_object<h3d>(h,sname,true,true,warn);

  } else if((sclass==p1d::s_class())||(sclass=="p1d")) {
    std::string stitle;
    INLIB_ISHELL_GET_ARG_STRING(_args,title)

    unsigned int xbins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,xbins,)
    double xmin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmin,)
    double xmax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmax,)

    double vmin,vmax;
    p1d* h = 0;
    if(_args.find<double>("-vmin",vmin,0) &&
       _args.find<double>("-vmax",vmax,0) ){
      h = new p1d(stitle,xbins,xmin,xmax,vmin,vmax);
    } else {
      h = new p1d(stitle,xbins,xmin,xmax);
    }
    a_mgr.manage_object<p1d>(h,sname,true,true,warn);

  } else if(sclass==p2d::s_class()||(sclass=="p2d")) {
    std::string stitle;
    INLIB_ISHELL_GET_ARG_STRING(_args,title)

    unsigned int xbins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,xbins,)
    double xmin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmin,)
    double xmax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,xmax,)

    unsigned int ybins = 100;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,ybins,)
    double ymin = 0;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,ymin,)
    double ymax = 1;
    INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_create,ymax,)

    double vmin,vmax;
    p2d* h = 0;
    if(_args.find<double>("-vmin",vmin,0) &&
       _args.find<double>("-vmax",vmax,0) ){
      h = new p2d(stitle,xbins,xmin,xmax,ybins,ymin,ymax,vmin,vmax);
    } else {
      h = new p2d(stitle,xbins,xmin,xmax,ybins,ymin,ymax);
    }
    a_mgr.manage_object<p2d>(h,sname,true,true,warn);

  } else {
    a_insh.warn("histo_create : unknow class "+sout(sclass)+".");
  }
}

inline const std::string& insh_histo_create_help() {
  static const std::string s_help("\
histo_create: histo_create [-classes,-class,-no_warn,-title,-[x,y,z]bins,-[x,y,z]min,-[x,y,z]max] [name]\n\
  Create a named and managed histogram.\n\
  The name must have the syntax of a C variable.\n\
  If an object with same name already exist it is deleted.\n\
  According to the wanted class, various booking arguments can be passed.\n\
  -classes print the available classes.\n\
  -no_warn to not warn in case of overwriting an existing object.\n\
  -title=string title of the histogram (default is '').\n\
  -class=string class of the object to createa (default is h1d).\n\
  -[x,y,z]bins=uint number of [x,y,z] bins (default is 100).\n\
  -[x,y,z]min=real [x,y,z] min (default is 0).\n\
  -[x,y,z]max=real [x,y,z] max (default is 1).\n\
  Example:\n\
    histo_create -classes\n\
    histo_create my_histo\n\
    histo_create -class=h1d -title='my histo' -xbins=10 -xmin=-5 -xmax=5 h_1\n\
");
  return s_help;
}

inline bool insh_node_is_histo(const sg::node& a_node,std::string& a_name) {
 {if(const sg::holder<h1d>* h = sg::cast_holder<h1d>(a_node)) {a_name = h->name();return true;}}
 {if(const sg::holder<h2d>* h = sg::cast_holder<h2d>(a_node)) {a_name = h->name();return true;}}
 {if(const sg::holder<h3d>* h = sg::cast_holder<h3d>(a_node)) {a_name = h->name();return true;}}
 {if(const sg::holder<p1d>* h = sg::cast_holder<p1d>(a_node)) {a_name = h->name();return true;}}
 {if(const sg::holder<p2d>* h = sg::cast_holder<p2d>(a_node)) {a_name = h->name();return true;}}
  a_name.clear();
  return false;
}

inline bool insh_node_histo_sources(const sg::node& a_node,unsigned int& a_sources) {
 {if(const h1d* h = sg::cast_holder_object<h1d>(a_node)) {a_sources = 1;return true;}}
 {if(const h2d* h = sg::cast_holder_object<h2d>(a_node)) {a_sources = 2;return true;}}
 {if(const h3d* h = sg::cast_holder_object<h3d>(a_node)) {a_sources = 3;return true;}}
 {if(const p1d* h = sg::cast_holder_object<p1d>(a_node)) {a_sources = 2;return true;}}
 {if(const p2d* h = sg::cast_holder_object<p2d>(a_node)) {a_sources = 3;return true;}}
  a_sources = 0;
  return false;
}

inline void insh_histo_remove(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);
  if(_args.is_arg("-all")) {
    a_mgr.remove_by_class<h1d>();
    a_mgr.remove_by_class<h2d>();
    a_mgr.remove_by_class<h3d>();
    a_mgr.remove_by_class<p1d>();
    a_mgr.remove_by_class<p2d>();
    return;
  }
 {std::string sclass;
  if(_args.find("-class",sclass)&&(sclass.size())) {
       if((sclass==h1d::s_class())||(sclass=="h1d")) {a_mgr.remove_by_class<h1d>();return;}
  else if((sclass==h2d::s_class())||(sclass=="h2d")) {a_mgr.remove_by_class<h2d>();return;}
  else if((sclass==h3d::s_class())||(sclass=="h3d")) {a_mgr.remove_by_class<h3d>();return;}
  else if((sclass==p1d::s_class())||(sclass=="p1d")) {a_mgr.remove_by_class<p1d>();return;}
  else if((sclass==p2d::s_class())||(sclass=="p2d")) {a_mgr.remove_by_class<p2d>();return;}
  else {
    a_insh.warn("histo_remove : unknow class "+sout(sclass)+".");
    return;
  }}}

  std::string name;
  if(!_args.first_not_hyphen(name)) {
    a_insh.warn("histo_remove : no name given.");
    return;
  }
  sg::base_holder* _node = a_mgr.find_base_holder(name);
  if(!_node) {
    a_insh.warn("histo_remove : object "+sout(name)+" not found.");
    return;
  }
 {std::string hname;
  if(!insh_node_is_histo(*_node,hname)) {
    a_insh.warn("histo_remove : object "+sout(name)+" not an histo.");
    return;
  }}
  a_mgr.remove_node(_node,true);
}

inline const std::string& insh_histo_remove_help() {
  static const std::string s_help("\
histo_remove: histo_remove name\n\
  Remove managed histogram.\n\
  -all remove all objects.\n\
  Example:\n\
    histo_ls\n\
    histo_create h_1\n\
    histo_ls\n\
    histo_remove h_1\n\
    histo_ls\n\
    histo_remove -all\n\
");
  return s_help;
}

}}

#include "../sort"

namespace inlib {
namespace histo {

inline void insh_histo_ls(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  std::vector<std::string> vs;
  std::string name;
  inlib_vforcit(sg::node*,a_mgr.nodes().children(),it) {
    if(insh_node_is_histo(*(*it),name)) vs.push_back(name);
  }
  sort::sort(vs);
  a_insh.unix_print(vs);
}

inline const std::string& insh_histo_ls_help() {
  static const std::string s_help("\
histo_ls: histo_ls\n\
  List managed histograms.\n\
  Example:\n\
    histo_ls\n\
");
  return s_help;
}

}}

#include "../wcsv_histo"

namespace inlib {
namespace histo {

inline void insh_histo_print(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  if(a_args.empty()) {
    a_insh.out_begin();
    std::string name;
    inlib_vforcit(sg::node*,a_mgr.nodes().children(),it) {
      if(insh_node_is_histo(*(*it),name)) a_insh.out(name);
    }
    return;
  }
  args _args(a_args);
  std::string name;
  if(!_args.first_not_hyphen(name)) {
    a_insh.warn("histo_print : no name given.");
    return;
  }
  sg::base_holder* _node = a_mgr.find_base_holder(name);
  if(!_node) {
    a_insh.warn("histo_print : "+sout(name)+" not found.");
    return;
  }

#define INLIB_INSH_HISTO_PRINT(a__variable,a__xto)\
    if(_args.is_arg("-header")) {\
      wcsv::h_header(a_insh.out(),a__variable->s_cls(),*a__variable);\
    } else if(_args.is_arg("-hprint")) {\
      a__variable->hprint(a_insh.out());\
    } else {\
      wcsv::a__xto(a_insh.out(),a__variable->s_cls(),*a__variable);\
    }

  if(h1d* _h1d = sg::cast_holder_object<h1d>(*_node)) {
    INLIB_INSH_HISTO_PRINT(_h1d,hto)
  } else if(h2d* _h2d = sg::cast_holder_object<h2d>(*_node)) {
    INLIB_INSH_HISTO_PRINT(_h2d,hto)
  } else if(h3d* _h3d = sg::cast_holder_object<h3d>(*_node)) {
    INLIB_INSH_HISTO_PRINT(_h3d,hto)
  } else if(p1d* _p1d = sg::cast_holder_object<p1d>(*_node)) {
    INLIB_INSH_HISTO_PRINT(_p1d,pto)
  } else if(p2d* _p2d = sg::cast_holder_object<p2d>(*_node)) {
    INLIB_INSH_HISTO_PRINT(_p2d,pto)
  } else {
    a_insh.warn("histo_print : "+sout(name)+" has an unknown object class.");
  }

#undef INLIB_INSH_HISTO_PRINT

}

inline const std::string& insh_histo_print_help() {
  static const std::string s_help("\
histo_print: histo_print [-header,-hprint] [name]\n\
  Print histogram at the csv format given its name.\n\
  If no argument given, print all names.\n\
  -header to print the csv header only.\n\
  -hprint print summary as hbook hprint did.\n\
  Example:\n\
    histo_create\n\
    histo_ls\n\
    histo_print my_histo\n\
    histo_print -header my_histo\n\
    histo_print -hprint my_histo\n\
");
  return s_help;
}

}}

namespace inlib {
namespace histo {

inline const irandd* cast_irandd(const sg::node& a_node) {
  if(const rgaussd* r = sg::cast_holder_object<rgaussd>(a_node)) return r;
  if(const rbinomiald* r = sg::cast_holder_object<rbinomiald>(a_node)) return r;
  if(const rexpd* r = sg::cast_holder_object<rexpd>(a_node)) return r;
  if(const rbwd* r = sg::cast_holder_object<rbwd>(a_node)) return r;
  if(const rpoissd* r = sg::cast_holder_object<rpoissd>(a_node)) return r;
  return 0;
}

inline void insh_histo_fill(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);

  std::string name;
  if(!_args.first_not_hyphen(name)) {
    a_insh.warn("histo_fill : no name given.");
    return;
  }
  sg::base_holder* _node = a_mgr.find_base_holder(name);
  if(!_node) {
    a_insh.warn("histo_fill : histo object "+sout(name)+" not found.");
    return;
  }

  const irandd* _rand_1;
  const irandd* _rand_2;
  const irandd* _rand_3;
 {unsigned int sources;
  if(!insh_node_histo_sources(*_node,sources)||(!sources)||(sources>=4)) {
    a_insh.warn("histo_fill : can't get histo number of sources of "+sout(name)+".");
    return;
  }
  sg::base_holder* _source_1 = 0;
  sg::base_holder* _source_2 = 0;
  sg::base_holder* _source_3 = 0;
  if(sources>=1) {
    std::string source;
    if(!_args.find("-source",source)) {
      if(!_args.find("-source_1",source)) {
        a_insh.warn("histo_fill : no source given.");
        return;
      }
    }
    _source_1 = a_mgr.find_base_holder(source);
    if(!_source_1) {
      a_insh.warn("histo_fill : source_1 object "+sout(source)+" not found.");
      return;
    }
    _rand_1 = cast_irandd(*_source_1);
    if(!_rand_1) {
      a_insh.warn("histo_fill : source_1 object "+sout(source)+" is an unknow random.");
      return;
    }
  }
  if(sources>=2) {
    std::string source;
    if(!_args.find("-source_2",source)) {
      a_insh.warn("histo_fill : no source_2 given.");
      return;
    }
    _source_2 = a_mgr.find_base_holder(source);
    if(!_source_2) {
      a_insh.warn("histo_fill : source_2 object "+sout(source)+" not found.");
      return;
    }
    _rand_2 = cast_irandd(*_source_2);
    if(!_rand_2) {
      a_insh.warn("histo_fill : source_2 object "+sout(source)+" is an unknow random.");
      return;
    }
  }
  if(sources>=3) {
    std::string source;
    if(!_args.find("-source_3",source)) {
      a_insh.warn("histo_fill : no source_3 given.");
      return;
    }
    _source_3 = a_mgr.find_base_holder(source);
    if(!_source_3) {
      a_insh.warn("histo_fill : source_3 object "+sout(source)+" not found.");
      return;
    }
    _rand_3 = cast_irandd(*_source_3);
    if(!_rand_2) {
      a_insh.warn("histo_fill : source_3 object "+sout(source)+" is an unknow random.");
      return;
    }
  }}

  uint64 entries = 0;
  INLIB_ISHELL_GET_ARG_UINT64(a_insh,_args,histo_fill,entries,)
  double weight = 1;
  INLIB_ISHELL_GET_ARG_DOUBLE(a_insh,_args,histo_fill,weight,)

  if(h1d* _h1d = sg::cast_holder_object<h1d>(*_node)) {
    for(uint64 index=0;index<entries;index++) _h1d->fill(_rand_1->shootd(),weight);
  } else if(h2d* _h2d = sg::cast_holder_object<h2d>(*_node)) {
    for(uint64 index=0;index<entries;index++) _h2d->fill(_rand_1->shootd(),_rand_2->shootd(),weight);
  } else if(h3d* _h3d = sg::cast_holder_object<h3d>(*_node)) {
    for(uint64 index=0;index<entries;index++) _h3d->fill(_rand_1->shootd(),_rand_2->shootd(),_rand_3->shootd(),weight);
  } else if(p1d* _p1d = sg::cast_holder_object<p1d>(*_node)) {
    for(uint64 index=0;index<entries;index++) _p1d->fill(_rand_1->shootd(),_rand_2->shootd(),weight);
  } else if(p2d* _p2d = sg::cast_holder_object<p2d>(*_node)) {
    for(uint64 index=0;index<entries;index++) _p2d->fill(_rand_1->shootd(),_rand_2->shootd(),_rand_3->shootd(),weight);

  } else {
    a_insh.warn("histo_fill : "+sout(name)+" has an unknown object class.");
    return;
  }
}

inline const std::string& insh_histo_fill_help() {
  static const std::string s_help("\
histo_fill: histo_fill [-source,] [name]\n\
  Fill histogram from various sources.\n\
  According to the source, various arguments can be passed.\n\
  -weight=real weighty of the fill.\n\
  If -source=rgaussd (random gauss):\n\
  -mean=real mean value (default is 0).\n\
  -std_dev=real standard deviation (default is 1).\n\
  If -source=rbwd (random breit-wigner):\n\
  -mean=real mean value (default is 0).\n\
  -gamma=real gamma (default is 1).\n\
  If -source=rbinomial:\n\
  -n=uint (default is 1).\n\
  -p=real (default is 0.5).\n\
  If -source=rexpd:\n\
  -rate=real (default is 1).\n\
  If -source=rpoissd (random poisson):\n\
  -mean=real (default is 1).\n\
  -sources print the available source.\n\
  Example:\n\
    histo_fill -sources\n\
    histo_create -xbins=20 -xmin=-5 -xmax=5 h_1\n\
    histo_fill -source=rgaussd -mean=0 -std_dev=1 -entries=10000 h_1\n\
    histo_print h_1\n\
");
  return s_help;
}

}}

#include <fstream>

#include "../wroot/file"
#include "../wroot/to"

namespace inlib {
namespace histo {

inline bool insh_write_csv(std::ostream& a_writer,const sg::node& a_node) {
  char hc = '#';
  char sep = ',';
  bool have_header = true;
  if(const h1d* _h1d = sg::cast_holder_object<h1d>(a_node)) {
    if(!wcsv::hto(a_writer,_h1d->s_cls(),*_h1d,sep,hc,have_header)) return false;
  } else if(const h2d* _h2d = sg::cast_holder_object<h2d>(a_node)) {
    if(!wcsv::hto(a_writer,_h2d->s_cls(),*_h2d,sep,hc,have_header)) return false;
  } else if(const h3d* _h3d = sg::cast_holder_object<h3d>(a_node)) {
    if(!wcsv::hto(a_writer,_h3d->s_cls(),*_h3d,sep,hc,have_header)) return false;
  } else if(const p1d* _p1d = sg::cast_holder_object<p1d>(a_node)) {
    if(!wcsv::pto(a_writer,_p1d->s_cls(),*_p1d,sep,hc,have_header)) return false;
  } else if(const p2d* _p2d = sg::cast_holder_object<p2d>(a_node)) {
    if(!wcsv::pto(a_writer,_p2d->s_cls(),*_p2d,sep,hc,have_header)) return false;
  } else {
    return false;
  }
  return true;
}

inline bool insh_write_root(wroot::directory& a_dir,const sg::node& a_node,const std::string& a_name) {
  if(const h1d* _h1d = sg::cast_holder_object<h1d>(a_node)) {
    if(!wroot::to(a_dir,*_h1d,a_name)) return false;
  } else if(const h2d* _h2d = sg::cast_holder_object<h2d>(a_node)) {
    if(!wroot::to(a_dir,*_h2d,a_name)) return false;
  } else if(const h3d* _h3d = sg::cast_holder_object<h3d>(a_node)) {
    if(!wroot::to(a_dir,*_h3d,a_name)) return false;
  } else if(const p1d* _p1d = sg::cast_holder_object<p1d>(a_node)) {
    if(!wroot::to(a_dir,*_p1d,a_name)) return false;
  } else if(const p2d* _p2d = sg::cast_holder_object<p2d>(a_node)) {
    if(!wroot::to(a_dir,*_p2d,a_name)) return false;
  } else {
    return false;
  }
  return true;
}

inline void insh_histo_write(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);
  if(_args.is_arg("-formats")) {
    a_insh.out_begin();
    a_insh.out("csv",true);
    a_insh.out("root",true);
    return;
  }

  std::string name;
  _args.first_not_hyphen(name);

  std::string format;
  _args.find("-format",format,"csv");

  std::string file_name;
  _args.find("-file",file_name,"out."+format);

  if(format=="csv") {
    std::ofstream writer(file_name.c_str(),std::ios::binary); //binary for Windows to not have \r \l at each end of line.
    if(writer.fail()) {
      a_insh.warn("histo_write : can't open "+sout(file_name)+".");
      return;
    }
    if(name.empty()) {
      inlib_vforcit(sg::node*,a_mgr.nodes().children(),it) {
        if(insh_node_is_histo(*(*it),name)) {
          if(!insh_write_csv(writer,*(*it))) {
            a_insh.warn("histo_write : can't write "+sout(name)+" in csv file.");
          }
        }
      }
    } else {
      sg::base_holder* _node = a_mgr.find_base_holder(name);
      if(!_node) {
        a_insh.warn("histo_write : "+sout(name)+" not found.");
      } else {
        if(!insh_write_csv(writer,*_node)) {
          a_insh.warn("histo_write : can't write "+sout(_node->name())+" in csv file.");
        }
      }
    }
    writer.close();

  } else if(format=="root") {
    wroot::file file(a_insh.out(),file_name);
    //if(args.is_arg("-noz")){
    //} else {
    //rfile.add_ziper('Z',exlib::compress_buffer);
    //rfile.set_compression(9);
    //}
    wroot::directory& dir = file.dir();
    if(name.empty()) {
      inlib_vforcit(sg::node*,a_mgr.nodes().children(),it) {
        if(insh_node_is_histo(*(*it),name)) {
          if(!insh_write_root(dir,*(*it),name)) {
            a_insh.warn("histo_write : can't write "+sout(name)+" in root file.");
          }
        }
      }
    } else {
      sg::base_holder* _node = a_mgr.find_base_holder(name);
      if(!_node) {
        a_insh.warn("histo_write : "+sout(name)+" not found.");
      } else {
        if(!insh_write_root(dir,*_node,_node->name())) {
          a_insh.warn("histo_write : can't write "+sout(_node->name())+" in root file.");
        }
      }
    }

   {unsigned int n;
    if(!file.write(n)) {
      a_insh.warn("histo_write : root file write failed.");
    }}

    file.close();

  } else {
    a_insh.warn("histo_write : unknown file format "+sout(format)+".");
  }
}

inline const std::string& insh_histo_write_help() {
  static const std::string s_help("\
histo_write: histo_write [-file,-format] [name]\n\
  Write histogram in a file.\n\
  If no name is given, then all histograms are written.\n\
  -file=string output file (default is out.csv).\n\
  -format=string file format (default is csv).\n\
  If -format is given but -file is not given, output file is out.(format extension).\n\
  -formats print the available formats.\n\
  Example:\n\
    histo_write -formats\n\
    histo_create -xbins=20 -xmin=-5 -xmax=5 h_1\n\
    histo_fill -source=rgaussd -mean=0 -std_dev=1 -entries=10000 h_1\n\
    histo_write      # write in out.csv.\n\
    histo_write h_1  # write in out.csv.\n\
    histo_write -file=my.csv h_1\n\
    histo_write -format=root # write in out.root\n\
    histo_write -format=root -file=my.root h_1\n\
    ls\n\
");
  return s_help;
}

}}

#include "../sg/separator"
#include "../sg/ortho"
#include "../sg/plots"
#include "../sg/write_paper"
#include "../sg/dummy_freetype"
#include "../sg/h2plot"
#include "../sep"

#ifdef INLIB_HISTO_PLOT_OFFSCREEN_HAVE_PNG
#include <exlib/png>
#endif
#ifdef INLIB_HISTO_PLOT_OFFSCREEN_HAVE_JPEG
#include <exlib/jpeg>
#endif

namespace inlib {
namespace histo {

/*
inline bool insh_is_plottable(const sg::node& a_node) {
  if(sg::cast_holder_object<h1d>(a_node)) return true;
  if(sg::cast_holder_object<h2d>(a_node)) return true;
//if(sg::cast_holder_object<h3d>(a_node)) return true;
  if(sg::cast_holder_object<p1d>(a_node)) return true;
//if(sg::cast_holder_object<p2d>(a_node)) return true;
  return false;
}
*/

inline bool insh_plot(sg::plotter& a_plotter,const sg::node& a_node) {
  if(const h1d* _h1d = sg::cast_holder_object<h1d>(a_node)) {
    a_plotter.add_plottable(new sg::h1d2plot(*_h1d));
  } else if(const h2d* _h2d = sg::cast_holder_object<h2d>(a_node)) {
    a_plotter.add_plottable(new sg::h2d2plot(*_h2d));
//} else if(const h3d* _h3d = sg::cast_holder_object<h3d>(a_node)) {
//  a_plotter.add_plottable(new sg::h3d2plot(*_h3d));
  } else if(const p1d* _p1d = sg::cast_holder_object<p1d>(a_node)) {
    a_plotter.add_plottable(new sg::p1d2plot(*_p1d));
//} else if(const p2d* _p2d = sg::cast_holder_object<p2d>(a_node)) {
//  a_plotter.add_plottable(new sg::p2d2plot(*_p2d));
  } else {
    return false;
  }
  return true;
}

inline void insh_plots_in_file(ishell& a_insh,
                               sg::gl2ps_manager& a_gl2ps_mgr,sg::zb_manager& a_zb_mgr,
                               const std::string& a_file,const std::string& a_format,
                               unsigned int a_w,unsigned int a_h,
			       sg::plots& a_plots,sg::separator& a_sep) {
//unsigned int factor = 2; //have greater size to have good freetype rendering.
  unsigned int factor = 1;
  unsigned int _width = factor*a_w;
  unsigned int _height = factor*a_h;

  a_plots.adjust_size(_width,_height);

  colorf clear_color = colorf_white();

#ifdef INLIB_HISTO_PLOT_OFFSCREEN_HAVE_PNG
  sg::png_writer _png_writer = exlib::png::write;
#else
  sg::png_writer _png_writer = 0;
#endif

#ifdef INLIB_HISTO_PLOT_OFFSCREEN_HAVE_JPEG
  sg::jpeg_writer _jpeg_writer = exlib::jpeg::write;
#else
  sg::jpeg_writer _jpeg_writer = 0;
#endif

  if(!sg::write_paper(a_insh.out(),a_gl2ps_mgr,a_zb_mgr,_png_writer,_jpeg_writer,
                  clear_color.r(),clear_color.g(),clear_color.b(),clear_color.a(),
                  a_sep,_width,_height,a_file,a_format)) {
    a_insh.warn("histo_plot_offscreen : write_paper() failed.");
    return;
  }
}

inline void insh_histo_plot_offscreen(ishell& a_insh,sg::object_manager& a_mgr,const std::vector<std::string>& a_args) {
  args _args(a_args);
  if(_args.is_arg("-formats")) {
    a_insh.out_begin();
    a_insh.out("inzb_ps",true);
#ifdef INLIB_HISTO_PLOT_OFFSCREEN_HAVE_PNG
    a_insh.out("inzb_png",true);
#endif
#ifdef INLIB_HISTO_PLOT_OFFSCREEN_HAVE_JPEG
    a_insh.out("inzb_jpeg",true);
#endif
    a_insh.out("gl2ps_eps",true);
    a_insh.out("gl2ps_ps",true);
    a_insh.out("gl2ps_pdf",true);
    a_insh.out("gl2ps_svg",true);
    a_insh.out("gl2ps_tex",true);
    a_insh.out("gl2ps_pgf",true);
    return;
  }

  std::string name;
  _args.first_not_hyphen(name);

  std::string format;
  _args.find("-format",format,"inzb_ps");

  std::string sext;
  if(!file::paper_format_extension(format,sext)) {
    a_insh.warn("histo_plot_offscreen : unknown format "+sout(format)+".");
    return;
  }

  std::string file_name;
  _args.find("-file",file_name,"out."+sext);

  bool no_warn = _args.is_arg("-no_warn");

  //////////////////////////////////////////////////////////
  /// graphics managers : //////////////////////////////////
  //////////////////////////////////////////////////////////
  sg::zb_manager zb_mgr;
  sg::gl2ps_manager gl2ps_mgr;

  //////////////////////////////////////////////////////////
  /// scene graph //////////////////////////////////////////
  //////////////////////////////////////////////////////////
  //sg::text_freetype m_ttf;
  sg::dummy_freetype ttf;

  sg::separator* _sep = new sg::separator;

  sg::ortho* camera = new sg::ortho;
  camera->height = 1;
  float z = 10*1;
  camera->znear = 0.1f*z;
  camera->zfar = 10*z; //100*z induces problems with lego rendering.
  camera->position = vec3f(0,0,z);
  camera->orientation = rotf(vec3f(0,0,1),0);
  camera->focal = z;
  _sep->add(camera);

  sg::plots* plots = new sg::plots(ttf);
  plots->view_border = false;
  _sep->add(plots);

  unsigned int w = 400;
  unsigned int h = 400;

  if(name.empty()) {
    unsigned int cols = 1;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,cols,)
    unsigned int rows = 1;
    INLIB_ISHELL_GET_ARG_UINT(a_insh,_args,histo_create,rows,)

    if(!cols) cols = 1;
    if(!rows) rows = 1;

    plots->cols = cols;
    plots->rows = rows;
    plots->clear();

    std::string fp,fn,fs;
    path_name_suffix(file_name,fp,fn,fs);
    nosuffix(fn,fn);

   {unsigned int iplotter = 0;
    unsigned int ifile = 0;
    bool some_plotter_filled = false;
    inlib_vforcit(sg::node*,a_mgr.nodes().children(),it) {
      if(insh_node_is_histo(*(*it),name)) {
        sg::node* _node = *it;
        plots->set_current_plotter(iplotter);
        sg::plotter& _plotter = plots->current_plotter();
        if(!insh_plot(_plotter,*_node)) {
	  if(!no_warn) {
           //a_insh.warn("histo_plot_offscreen : can't plot "+sout(_node->std_name())+". (h3d, p2d not yet supported).");
             a_insh.out() << "histo_plot_offscreen :"
                          << " can't plot " << name << ". (h3d, p2d not yet supported)."
                          << std::endl;
          }
        } else {
          some_plotter_filled = true;
          iplotter++;
          if(iplotter>=plots->number()) {
            iplotter = 0;

            std::string file;
            if(fp.size()) file += fp+sep();
            file += fn;
            file += "_";
            numas(ifile,file);
            if(fs.size()) file += "."+fs;
            insh_plots_in_file(a_insh,gl2ps_mgr,zb_mgr,file,format,w,h,*plots,*_sep);

            plots->clear();
            some_plotter_filled = false;
            ifile++;
          }
        }
      }
    }
    if(some_plotter_filled) {
      std::string file;
      if(fp.size()) file += fp+sep();
      file += fn;
      file += "_";
      numas(ifile,file);
      if(fs.size()) file += "."+fs;
      insh_plots_in_file(a_insh,gl2ps_mgr,zb_mgr,file,format,w,h,*plots,*_sep);
    }}

  } else {

    plots->cols = 1;
    plots->rows = 1;
    plots->clear();

    sg::base_holder* _node = a_mgr.find_base_holder(name);
    if(!_node) {
      a_insh.warn("histo_plot_offscreen : "+sout(name)+" not found.");
    } else {
      sg::plotter& _plotter = plots->current_plotter();
      if(!insh_plot(_plotter,*_node)) {
         a_insh.warn("histo_plot_offscreen : can't plot "+sout(_node->name())+". (h3d, p2d not yet supported).");
      } else {
        insh_plots_in_file(a_insh,gl2ps_mgr,zb_mgr,file_name,format,w,h,*plots,*_sep);
      }
    }
  }

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  delete _sep;  //must be before deleting the graphics managers.

}

inline const std::string& insh_histo_plot_offscreen_help() {
  static const std::string s_help("\
histo_plot_offscreen: histo_plot_offscreen [-file,-format] [name]\n\
  Plot offscreen histograms in one or more files.\n\
  If no name is given, plot all of them (if they are plottable).\n\
  -file=string output file (default is out.ps).\n\
  -format=string file format (default is ps).\n\
  If -format is given but -file is not given, output file is out.(format extension).\n\
  In case of 'no name', a file is created per grid of 'cols*rows' plots; in such\n\
  a case file names are of the form 'file'_(index).(format extension).\n\
  -cols=uint number of grid columns in case of 'no name' (default is 1).\n\
  -rows=uint number of grid rows in case of 'no name' (default is 1).\n\
  If available when building the app, -format could be png or jpeg.\n\
  -formats print the available formats.\n\
  -no_warn to not warn in case of a not plottable object.\n\
  Example:\n\
    histo_plot_offscreen -formats\n\
    histo_create -xbins=20 -xmin=-5 -xmax=5 h_1\n\
    histo_fill -source=rgaussd -mean=0 -std_dev=1 -entries=10000 h_1\n\
    histo_create -xbins=20 -xmin=-5 -xmax=5 h_2\n\
    histo_fill -source=rbwd -gamma=1 -std_dev=1 -entries=10000 h_2\n\
    \n\
    histo_plot_offscreen h_1  # write in out.ps.\n\
    histo_plot_offscreen -file=my.ps h_1\n\
    histo_plot_offscreen -format=png h_1  #write out.png\n\
    histo_plot_offscreen -format=jpeg -file=my.jpeg h_1\n\
    \n\
    histo_plot_offscreen -cols=2 -rows=2\n\
    ls\n\
");
  return s_help;
}

///////////////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////////////////////

#define INLIB_HISTO_INSH_CLASSES(a__holder,a__insh,a__manager)\
  INLIB_INSH_CLASS_CMD(a__holder,random_create,\
                       inlib::histo::insh_random_create(a__insh,a__manager,a_args),inlib::histo::insh_random_create_help())\
  INLIB_INSH_CLASS_CMD(a__holder,histo_create,\
                       inlib::histo::insh_histo_create(a__insh,a__manager,a_args),inlib::histo::insh_histo_create_help())\
  INLIB_INSH_CLASS_CMD(a__holder,histo_remove,\
                       inlib::histo::insh_histo_remove(a__insh,a__manager,a_args),inlib::histo::insh_histo_remove_help())\
  INLIB_INSH_CLASS_CMD(a__holder,histo_ls,\
                       inlib::histo::insh_histo_ls(a__insh,a__manager,a_args),inlib::histo::insh_histo_ls_help())\
  INLIB_INSH_CLASS_CMD(a__holder,histo_print,\
                       inlib::histo::insh_histo_print(a__insh,a__manager,a_args),inlib::histo::insh_histo_print_help())\
  INLIB_INSH_CLASS_CMD(a__holder,histo_fill,\
                       inlib::histo::insh_histo_fill(a__insh,a__manager,a_args),inlib::histo::insh_histo_fill_help())\
  INLIB_INSH_CLASS_CMD(a__holder,histo_write,\
                       inlib::histo::insh_histo_write(a__insh,a__manager,a_args),inlib::histo::insh_histo_write_help())\
  INLIB_INSH_CLASS_CMD(a__holder,histo_plot_offscreen,\
                       inlib::histo::insh_histo_plot_offscreen(a__insh,a__manager,a_args),inlib::histo::insh_histo_plot_offscreen_help())

#define INLIB_HISTO_INSH_ADDS(a__insh,a__holder)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,random_create)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_create)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_remove)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_ls)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_print)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_fill)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_write)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,histo_plot_offscreen)

}}

#endif
