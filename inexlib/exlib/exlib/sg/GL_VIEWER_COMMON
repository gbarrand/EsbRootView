// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_sg_GL_VIEWER_COMMON
#define exlib_sg_GL_VIEWER_COMMON

#include "GL_action"

#define EXLIB_GL_VIEWER_AFTER_RENDER \
  void after_render() {\
    /*WARNING : it does OpenGL. Under Android it should be executed in the OpenGL thread.*/\
    /*WARNING : if having more m_produce_xxx, look exlib/app/iOS/GLView_mm.*/\
    \
    std::ostream& _out = parent::m_out;\
    \
    std::string path;\
    if(parent::m_produce_out_jpeg || parent::m_produce_out_png) {\
      if(parent::m_produce_out_file.empty()) {\
        const std::string& _out_dir = parent::out_dir();\
        if(_out_dir.size()) {\
          if(!inlib::check_dir(_out,_out_dir)) {parent::map_warn_failed();return;}\
          path = _out_dir+inlib::sep();\
        }\
        if(parent::m_produce_out_jpeg) path += "out.jpeg";\
        else path += "out.png";\
      } else {\
        path = parent::m_produce_out_file;\
        parent::m_produce_out_file.clear();\
      }\
    }\
    \
    if(parent::m_produce_out_jpeg) {\
      parent::m_produce_out_jpeg = false;\
      \
      unsigned char* buffer = exlib::sg::GL_manager::get_rgbs(parent::m_ww,parent::m_wh); /*NOTE : jpeg wants bpp=3.*/\
      if(!buffer) {\
        _out << "EXLIB_GL_VIEWER_METHODS::after_render() : can't get image." << std::endl;\
        parent::map_warn_failed();\
        return;\
      }\
      unsigned int bpp = 3;\
      if(!exlib::jpeg::write(_out,path,buffer,parent::m_ww,parent::m_wh,bpp,100)) parent::map_warn_failed();\
      delete [] buffer;\
    }\
    \
    if(parent::m_produce_out_png) {\
      parent::m_produce_out_png = false;\
      \
      unsigned char* buffer = 0;\
      if(parent::m_produce_out_bpp==4) {\
        buffer = exlib::sg::GL_manager::get_rgbas(parent::m_ww,parent::m_wh);\
      } else if(parent::m_produce_out_bpp==3) {\
        buffer = exlib::sg::GL_manager::get_rgbs(parent::m_ww,parent::m_wh);\
      } else {\
        _out << "EXLIB_GL_VIEWER_METHODS::after_render() : bad bpp " << parent::m_produce_out_bpp << "." << std::endl;\
        parent::map_warn_failed();\
        return;\
      }\
      if(!buffer) {\
        _out << "EXLIB_GL_VIEWER_METHODS::after_render() : can't get image." << std::endl;\
        parent::map_warn_failed();\
        return;\
      }\
      unsigned int bpp = parent::m_produce_out_bpp;\
      if(!exlib::png::write(_out,path,buffer,parent::m_ww,parent::m_wh,bpp)) parent::map_warn_failed();\
      delete [] buffer;\
    }\
  }

#define EXLIB_GL_VIEWER_METHODS \
public:/*public for iOS*/\
  EXLIB_GL_VIEWER_AFTER_RENDER \
public:\
  virtual void render() {\
    parent::check_gui_cursor();\
    if(!parent::m_ww||!parent::m_wh) return;\
    if(parent::m_vr_mode) {\
      unsigned int half_ww = parent::m_ww*0.5;\
      if(m_mgr_gra.begin_render(0,0,half_ww,parent::m_wh,\
                                       parent::m_clear_color.r(),\
                                       parent::m_clear_color.g(),\
                                       parent::m_clear_color.b(),\
                                       parent::m_clear_color.a(),true)) {\
        exlib::sg::GL_action action(m_mgr_gra,parent::m_out,half_ww,parent::m_wh);\
        action.state().m_use_gsto = parent::m_use_gsto;\
        parent::m_sg.render(action);\
        if(!action.end()) parent::m_out << "EXLIB_GL_VIEWER_METHODS::render() : bad gl_action end." << std::endl;\
      }\
      if(m_mgr_gra.begin_render(half_ww,0,half_ww,parent::m_wh,\
                                       parent::m_clear_color.r(),\
                                       parent::m_clear_color.g(),\
                                       parent::m_clear_color.b(),\
                                       parent::m_clear_color.a(),false)) {\
        exlib::sg::GL_action action(m_mgr_gra,parent::m_out,half_ww,parent::m_wh);\
        action.state().m_use_gsto = parent::m_use_gsto;\
        parent::m_sg.render(action);\
        if(!action.end()) parent::m_out << "EXLIB_GL_VIEWER_METHODS::render() : bad gl_action end." << std::endl;\
      }\
      m_mgr_gra.end_render();\
    } else {\
      if(m_mgr_gra.begin_render(0,0,parent::m_ww,parent::m_wh,\
                                       parent::m_clear_color.r(),\
                                       parent::m_clear_color.g(),\
                                       parent::m_clear_color.b(),\
                                       parent::m_clear_color.a())) {\
        exlib::sg::GL_action action(m_mgr_gra,parent::m_out,parent::m_ww,parent::m_wh);\
        action.state().m_use_gsto = parent::m_use_gsto;\
        parent::m_sg.render(action);\
        if(!action.end()) parent::m_out << "EXLIB_GL_VIEWER_METHODS::render() : bad gl_action end." << std::endl;\
        after_render();\
        m_mgr_gra.end_render();\
      }\
    }\
  }\
public:\
  virtual void gl_infos(std::vector<std::string>& a_v) const {\
    a_v.clear();\
    {const char* _sv = (const char*)::glGetString(GL_VERSION);\
     if(_sv) a_v.push_back("GL_VERSION : "+std::string(_sv));}\
    {const char* _sv = (const char*)::glGetString(GL_VENDOR);\
     if(_sv) a_v.push_back("GL_VENDOR : "+std::string(_sv));}\
    {const char* _sv = (const char*)::glGetString(GL_RENDERER);\
     if(_sv) a_v.push_back("GL_RENDERER : "+std::string(_sv));}\
   /*{const char* _sv = (const char*)::glGetString(GL_EXTENSIONS);\
     if(_sv) a_v.push_back("GL_EXTENSIONS : "+std::string(_sv));}*/\
    {GLint iv;\
     ::glGetIntegerv(GL_MAX_TEXTURE_SIZE, &iv);\
     std::string _s;\
     if(inlib::num2s(iv,_s)) a_v.push_back("GL_MAX_TEXTURE_SIZE : "+_s);}\
    /*GLint gl_buffer_size;::glGetIntegerv(GL_BUFFER_SIZE, &gl_buffer_size);*/\
  }

//exlib_build_use inlib png jpeg zlib GL

#endif
