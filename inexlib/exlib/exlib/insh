// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_insh
#define exlib_insh

#include <inlib/ishell>
#include <inlib/args>

#ifdef EMSCRIPTEN
#include <emscripten.h>
#include <inlib/path>
#else
#include <inlib/sout>
#include <inlib/file>
#include <inlib/sep>
#include <inlib/net/wget>
#include <inlib/get_lines>
#endif

namespace exlib {

inline void insh_web_get_file(inlib::ishell& a_insh,const std::string& a_out_dir,const std::vector<std::string>& a_args) {
    static const std::string s_header("exlib::insh_web_get_file :");
    if(a_args.empty()) {
      a_insh.warn(s_header+" no url given.");
      return;
    }
    std::string url;
    url = a_args[a_args.size()-1];
    inlib::args _args(a_args);
    _args.remove_last();
  //if(!_args.first_not_hyphen(url)) {  //no, url may contains '=' through a cgi-bin request.
  //  a_insh.warn(s_header+" no url given.");
  //  return;
  //}
    bool warn = _args.is_arg("-no_warn")?false:true;
    std::string sout;
    INLIB_ISHELL_GET_ARG_STRING(_args,out)
    if(sout.empty()) {
      inlib::base_name(url,sout);
    }
    std::string sinsh;
    INLIB_ISHELL_GET_ARG_STRING(_args,insh)
#ifdef EMSCRIPTEN
    // request.readyState :
    // 0  UNSENT           Client has been created. open() not called yet.
    // 1  OPENED           open() has been called.
    // 2  HEADERS_RECEIVED send() has been called, and headers and status are available.
    // 3  LOADING          Downloading; responseText holds partial data.
    // 4  DONE
    std::ostringstream script;
    script << "var request = new XMLHttpRequest();"
           << "request.open('GET','" << url << "',true);"
           << "request.responseType = 'arraybuffer';"
           << "request.onreadystatechange = () => {"
           << "  if (request.readyState == 4) {"
           << "    if (request.status == 200 || request.status == 0) {"
           << "      Module.app_pop_list();"
           << "      upload_file('" << sout << "',new Int8Array(request.response)," << (warn?"true":"false") << ");";
   if(sinsh.size()) {
   script  << "      Module.app_source_insh('" << sinsh << "');";
   }	   
   script  << "    } else {"
           << "      /*console.log('request.status '+request.status);*/"
           << "    }"
           << "  } else {"
           << "    /*console.log('request.readyState '+request.readyState);*/"
           << "  }"
           << "};"
           << "Module.app_map_warn('downloading...',false);"
           << "request.send();";
    ::emscripten_run_script(script.str().c_str());
#else
    std::string host;
    unsigned int port;
    std::string request;
    if(!inlib::url_parse(url,host,port,request)) {
      a_insh.warn(s_header+" url_parse() failed for url "+inlib::sout(url)+".");
      return;
    }
    if((host.size()>=8)&&(host.substr(0,8)=="https://")) {
      a_insh.warn(s_header+" we can't do https for the moment.");
      return;
    }
    if(!port) {
      if((host.size()>=8)&&(host.substr(0,8)=="https://")) {
        port = 8080;
      } else {
        port = 80;
      }
    }
    inlib::net::wget _wget(a_insh.out());
    std::string path = a_out_dir+inlib::sep()+sout;
    char* doc;
    inlib::uint64 ldoc;
    std::string icookie,ocookie;
    if(!_wget.get(host,port,request,doc,ldoc,icookie,ocookie)) {
      a_insh.warn(s_header+" web get failed for url "+inlib::sout(url)+".");
      return;
    }
    if(!ldoc) {
      a_insh.warn(s_header+" ldoc is zero..");
      return;
    }
    //::printf("debug : get %lu bytes. Write in \"%s\"\n",ldoc,path.c_str());
    bool status = inlib::file::write_bytes(path,doc,(size_t)ldoc);
    delete [] doc;
    if(!status) {
      a_insh.warn(s_header+" file::write_bytes() failed for file "+inlib::sout(path)+".");
      return;
    }
    if(warn) {
      std::string _s;
      inlib::size_t2s(ldoc,_s);
      a_insh.warn("done "+_s+" bytes.",false);
    }
    if(sinsh.size()) {
      std::vector<std::string> lines;
      inlib::get_lines(sinsh,lines);
      a_insh.exec_lines_reset_to_stop(lines);
    }      
#endif
}

inline const std::string& insh_web_get_file_help() {
    static const std::string s_help("\
web_get_file: web_get_file [-out] url\n\
  Get url and put the content in the doc dir.\n\
  -out=string to give an output file name.\n\
  If no -out is given, it is assumed that url finishes with\n\
  the name of a file, which is then taken as output file name.\n\
  WARNING : on wasm, the request is asynchronous.\n\
");
  return s_help;
}

#ifdef EMSCRIPTEN
inline void insh_emscripten_run_script(const std::vector<std::string>& a_args) {
  if(a_args.empty()) return;
  ::emscripten_run_script(a_args[0].c_str());
}

inline const std::string& insh_emscripten_run_script_help() {
  static const std::string s_help("\
ems: ems command\n\
  Do a ::emscripten_run_script(command).\n\
  Example:\n\
    ems 'alert(\"hello world!\")'\n\
");
  return s_help;
}

inline void insh_ems_download_app_doc_file(const std::vector<std::string>& a_args) {
  if(a_args.empty()) return;
  std::string name;
  inlib::base_name(a_args[0],name);
  std::string script("download_app_doc_file('"+name+"');");
  ::emscripten_run_script(script.c_str());
}

inline const std::string& insh_ems_download_app_doc_file_help() {
  static const std::string s_help("\
ems_download_app_doc_file: download_app_doc_file file\n\
  Download on the local machine a file found in the app doc directory.\n\
  Example:\n\
    ems_download_app_doc_file out.png\n\
");
  return s_help;
}

#endif

}

#include "xml/xml_style"
#include <inlib/sg/gui_viewer>

namespace exlib {

inline void insh_style_load_file(inlib::sg::gui_viewer& a_main,const std::vector<std::string>& a_args) {
  static const std::string s_header("exlib::insh_style_load_file :");
  inlib::args _args(a_args);
  std::string file;
  if(!_args.first_not_hyphen(file)) {
    a_main.insh().warn(s_header+" no file given.");
    return;
  }
  if(_args.is_arg("-doc_res")) {
    std::string path;
    if(!a_main.find_doc_res_file(file,path)) {
      a_main.insh().warn(s_header+" file "+inlib::sout(file)+" not found in doc and res dirs.");
      return;
    }
    file = path;
  } else if(_args.is_arg("-doc")) {
    std::string path;
    if(!a_main.find_doc_file(file,path)) {
      a_main.insh().warn(s_header+" file "+inlib::sout(file)+" not found in doc dir.");
      return;
    }
    file = path;
  } else if(_args.is_arg("-res")) {
    std::string path;
    if(!a_main.find_res_file(file,path)) {
      a_main.insh().warn(s_header+" file "+inlib::sout(file)+" not found in res dir.");
      return;
    }
    file = path;
  }
  if(!xml::load_style_file(a_main.out(),file,a_main.styles())) {
    a_main.insh().warn(s_header+" xml parsing of "+file+" failed.");
    return;
  }
}

inline const std::string& insh_style_load_file_help() {
    static const std::string s_help("\
style_load_file: style_load_file [-doc_res,-res,-doc] path\n\
  Load a XML style file.\n\
  If no directory is given in path, the -doc_res option permits to search a file first\n\
  in the document directory declared to the app, and then in the app (internal) resource directory.\n\
  -res for the resource directory only, -doc for the document directory only.\n\
  See also : app_dir.\n\
");
  return s_help;
}

}

#define EXLIB_INSH_CLASSES_BASE(a__holder)\
  INLIB_INSH_CLASS_CMD(a__holder,style_load_file,exlib::insh_style_load_file(m_holder,a_args),exlib::insh_style_load_file_help())\
  INLIB_INSH_CLASS_CMD(a__holder,web_get_file,exlib::insh_web_get_file(m_holder.insh(),m_holder.doc_dir(),a_args),exlib::insh_web_get_file_help())

#define EXLIB_INSH_ADDS_BASE(a__insh,a__holder)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,style_load_file)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,web_get_file)

#ifdef EMSCRIPTEN

#define EXLIB_INSH_CLASSES(a__holder)\
  EXLIB_INSH_CLASSES_BASE(a__holder)\
  INLIB_INSH_CLASS_CMD(a__holder,ems,exlib::insh_emscripten_run_script(a_args),exlib::insh_emscripten_run_script_help())\
  INLIB_INSH_CLASS_CMD(a__holder,ems_download_app_doc_file,exlib::insh_ems_download_app_doc_file(a_args),exlib::insh_ems_download_app_doc_file_help())

#define EXLIB_INSH_ADDS(a__insh,a__holder)\
  EXLIB_INSH_ADDS_BASE(a__insh,a__holder)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,ems)\
  INLIB_INSH_ADD_CMD(a__insh,a__holder,ems_download_app_doc_file)

#else

#define EXLIB_INSH_CLASSES(a__holder)\
  EXLIB_INSH_CLASSES_BASE(a__holder)

#define EXLIB_INSH_ADDS(a__insh,a__holder)\
  EXLIB_INSH_ADDS_BASE(a__insh,a__holder)

#endif

//exlib_build_use exlib inlib expat

#endif
