// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_tntnet_main_cpp
#define exlib_app_tntnet_main_cpp

#include "../../WebGL/session"

///////////////////////////////////////////////
/// clash of cxxtools/char.h with pyport.h ////
///////////////////////////////////////////////
#ifdef Py_PYPORT_H
#ifdef _PY_PORT_CTYPE_UTF8_ISSUE
#undef isalnum
#undef isalpha
#undef islower
#undef isspace
#undef isupper
#undef tolower
#undef toupper
#endif
#endif
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

#include <tnt/ecpp.h>
#include <tnt/componentfactory.h>
#include <tnt/httpreply.h>
#include <tnt/tntnet.h> //for shutdown.

#include <iostream>

INLIB_GLOBAL_STRING(app_WebGL_args)
INLIB_GLOBAL_STRING(app_name)

namespace exlib {
namespace WebGL {

template <class APP_MAIN>
class component : public tnt::EcppComponent {
  INLIB_CLASS_STRING(cmd)
  INLIB_CLASS_STRING(shutdown)
protected:
  typedef main<APP_MAIN> main_t;
  typedef session<APP_MAIN> session_t;
public:
  component(const tnt::Compident& a_ci,const tnt::Urlmapper& a_um,tnt::Comploader& a_cl)
  :EcppComponent(a_ci,a_um,a_cl)
  {
    //::printf("debug : create component : %lu\n",(unsigned long)this);
  }

protected:
  virtual ~component(){
    //::printf("debug : delete component : %lu\n",(unsigned long)this);
  }

protected:
  session_t* get_session(tnt::HttpRequest& a_request) {
    tnt::Scope& _scope = a_request.getSessionScope();

    //TNT_SESSION_COMPONENT_VAR(session,s_session,"session s_session",());
    const std::string key = getComponentScopePrefix(getCompident())+"::session";
    session_t* _session = _scope.get<session_t>(key);
    if(!_session) {
      std::string sargs;
      std::string app_name;
      inlib_mforcit(std::string,std::string,a_request.getArgs(),it) {
        if((*it).first==s_app_WebGL_args()) sargs = (*it).second;
        if((*it).first==s_app_name()) app_name = (*it).second;
      }
      inlib::args args(sargs," ",true);
      args.add(s_arg_app_name(),app_name);

      _session = new session_t(std::cout,args);
      //if(!_session->m_is_valid) {
      //  delete _session;
      //  return 0;
      //}

      _scope.put<session_t>(key,_session);
    }
    //::printf("debug : scopekey : %s : %lu\n",key.c_str(),_session);

    return _session;
  }
  void delete_session(tnt::HttpRequest& a_request) {
    tnt::Scope& _scope = a_request.getSessionScope();
    const std::string key = getComponentScopePrefix(getCompident())+"::session";
    _scope.erase(key); //it deletes the session object.
  }

public:
  unsigned operator() (tnt::HttpRequest& a_request,
                       tnt::HttpReply& a_reply,
                       tnt::QueryParams& a_qparam) {

    session_t* psession = get_session(a_request);
    if(!psession) {
      std::string msg = " new session() failed.";
      a_reply.sout() << s_failed() << " : " << msg;
      return HTTP_OK;
    }

    session_t& _session = *psession;

    bool verbose = _session.verbose();
    if(verbose) {
      ::printf("a_request.getBody() : \"%s\"\n",a_request.getBody().c_str());
      ::printf("a_request.getMethod() : \"%s\"\n",a_request.getMethod().c_str());
      ::printf("a_request.getQuery() : \"%s\"\n",a_request.getQuery().c_str());
      ::printf("a_request.getUrl() : \"%s\"\n",a_request.getUrl().c_str());
      ::printf("a_request.getPathInfo() : \"%s\"\n",a_request.getPathInfo().c_str());
      ::printf("a_request.getContentSize() : %lu\n",a_request.getContentSize());
      ::printf("a_request.getContentType().getType() : \"%s\"\n",a_request.getContentType().getType().c_str());
      ::printf("a_request.isMultipart() : %d\n",a_request.isMultipart());
      ::printf("a_request.getCookies() :\n");
      std::cout << a_request.getCookies() << std::endl;
    }


    std::string url = a_request.getUrl();

   {std::string content_type;
    if(_session.dispatch_url(url,a_reply.out(),a_reply.sout(),content_type)) {
      if(content_type.size()) a_reply.setContentType(content_type);
      return HTTP_OK;
    }}

    if(url=="/") {

      std::string cmd = a_qparam.param(s_cmd());
      if(_session.verbose()) ::printf("app_WebGL : cmd : \"%s\"\n",cmd.c_str());

      std::string content_type;
      if(_session.dispatch_cmd(cmd,a_reply.out(),a_reply.sout(),content_type)) {
        if(content_type.size()) a_reply.setContentType(content_type);
        return HTTP_OK;
      }

      std::string rest;
      inlib::cmd::rest(cmd,rest);

      if(cmd==s_shutdown()) {
        if(_session.can_shutdown()) {
          tnt::Tntnet::shutdown();
          a_reply.sout() << s_done();
        } else {
          _session.http_failed(a_reply.sout(),"cmd=shutdown not enabled.");
        }

      } else {
        _session.http_failed(a_reply.sout(),"unknown command.");
      }

    } else if(inlib::is_beg(url,"/exlib_upload_form_")) {
                               //0123456789012345678
      std::string smid = url.substr(19,url.size()-19);
      unsigned int mid;
      if(!inlib::to(smid,mid)) {
        std::cout << "exlib_upload_form : syntax error." << std::endl;
        return HTTP_OK;
      }
      main_t* main_ = 0;
      if(!_session.find_main(mid,main_)) {
        std::cout << "main id not found." << std::endl;
        return HTTP_OK;
      }
      main_t& _main = *main_;
      if(a_request.isMultipart()) {
        const tnt::Multipart& mp = a_request.getMultipart();
        tnt::Multipart::const_iterator it;
        for(it=mp.begin();it!=mp.end();++it) {
          const tnt::Part& part = *it;
          if(_session.verbose()) {
            ::printf("part size %lu\n",part.getSize());
            ::printf("part name : %s\n",part.getName().c_str());
            ::printf("part file name : %s\n",part.getFilename().c_str());
          }

          //std::string fname = "/tmp/"+part.getFilename();
          std::string fname;
          if(!inlib::tmpname(_session.tmp_dir(),"exlib_WebGL_","",fname)) {
            std::cout << "app_WebGL : exlib_upload_form : inlib::tmpname() failed." << std::endl;
          } else {
            std::ofstream ofs(fname.c_str());
            if(ofs.is_open()) {
              tnt::Part::const_iterator itp;
              for(itp=part.begin();itp!=part.end();++itp) {
                ofs << *itp;
              }
              ofs.close();
              _main.m_tmp_files.push_back(fname);
              _main.open_file(fname);
            } else {
              if(_session.verbose()) ::printf("app_WebGL : exlib_upload_form : can't open \"%s\"\n",fname.c_str());
            }
          }

        }
      }

      _main.reply_reload(mid,a_reply.out());

    } else {

      // try a file from res dir :
     {std::string path = _session.res_dir()+url;
      std::ifstream ifs(path.c_str());
      if(ifs.is_open()) {
       {std::string mime;
        if(inlib::file::mime_type(path,mime)){
          a_reply.setContentType(mime);
        } else {
          if(_session.verbose()) ::printf("app_WebGL : no mime for : \"%s\".\n",path.c_str());
        }}
        a_reply.out() << ifs.rdbuf();
        ifs.close();
        if(_session.verbose()) ::printf("app_WebGL : empty cmd : \"%s\" ok.\n",path.c_str());
        return HTTP_OK;
      }}

      _session.http_failed(a_reply.sout(),"unhandled query "+a_request.getQuery());

    }

    return HTTP_OK;
  }
};

}}

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

#include <tnt/tntnet.h>

#include <inlib/net/base_socket>

template <class APP_CONTEXT,class APP_MAIN>
inline int exlib_main(const std::string& a_app_name,int argc,char** argv) {

  bool verbose = false;

#ifdef INLIB_MEM
  inlib::mem::set_check_by_class(true);{
#endif

  std::string exe_path; //for res_dir
  if(!inlib::program_path(argv[0],exe_path)) {
    std::cout << "exlib_main : can't get exe path." << std::endl;
    return EXIT_FAILURE;
  }

  inlib::args args(argc,argv);

  if(args.is_arg(inlib::s_arg_help())) {
    std::cout << "args :" << std::endl
              << inlib::s_arg_help() << std::endl
              << inlib::s_arg_verbose() << std::endl
              << inlib::s_arg_host() << std::endl
              << inlib::s_arg_port() << std::endl
              << inlib::s_arg_can_shutdown() << std::endl
              << inlib::s_arg_land() << std::endl
              << inlib::s_arg_document() << std::endl
              << s_arg_bgcolor() << std::endl
              << s_arg_compression() << std::endl
              << s_arg_reply_compression() << std::endl
              << std::endl;
    return EXIT_SUCCESS;
  }

  verbose = args.is_arg(inlib::s_arg_verbose());

  std::string host;
  if(args.is_arg(inlib::s_arg_host())) {
    args.find(inlib::s_arg_host(),host,"0.0.0.0");
  } else {
    if(!inlib::net::host_name(std::cout,host)) host = "0.0.0.0";
  }

  unsigned int port;
  args.find<unsigned int>(inlib::s_arg_port(),port,8000);
  if(verbose) {
    std::cout << "host " << host << std::endl;
    std::cout << "port " << port << std::endl;
  }

  args.remove(inlib::s_arg_host());
  args.remove(inlib::s_arg_port());

 {std::string res_dir;
  inlib::app_res_dir(exe_path,res_dir);
  APP_CONTEXT app_context(res_dir);}

  tnt::ComponentFactoryImpl< exlib::WebGL::component<APP_MAIN> > Factory(a_app_name);

  try  { 

    tnt::Tntnet app;    
/*
    tnt::TntConfig conf;
    conf.listenBacklog;
    app.init(conf);
*/
    app.setAppName(a_app_name);

    app.listen(host,port);    

    //NOTE : tnt example is "^/$", but the below pattern is needed for web clients.
    tnt::Mapping& murl = app.mapUrl("^/(.*)$",a_app_name);
    murl.setPathInfo(inlib::sep()+a_app_name);

   {std::map<std::string,std::string> _args;
    std::string sargs; //space separated args : "-key1=value1 -key2=value2 ..."
    std::vector<std::string> v;args.to_vector(v);
    inlib_vforcit(std::string,v,it) {
      sargs += " ";
      sargs += *it;
    }
    _args[s_app_WebGL_args()] =  sargs;
    _args[s_app_name()] =  a_app_name;
    murl.setArgs(_args);}

    if(verbose) std::cout << "tnt::Tntnet.run() ..." << std::endl;
    app.run(); 

  }  catch (const std::exception& a_e)  {
    std::cerr << a_e.what() << std::endl;
  }

#ifdef INLIB_MEM
  }inlib::mem::balance(std::cout);
  if(verbose) std::cout << a_app_name << "_tntnet : exit(mem) ..." << std::endl;
#else
  if(verbose) std::cout << a_app_name << "_tntnet : exit ..." << std::endl;
#endif

  return EXIT_SUCCESS;
}

#endif

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat tntnet
