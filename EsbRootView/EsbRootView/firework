// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file EsbRootView.license for terms.

#ifndef EsbRootView_EsbRootView_firework
#define EsbRootView_EsbRootView_firework

#include <exlib/sg/text_freetype_marker>

#include <inlib/sg/firework_anim>
#include <inlib/sg/matrix>
#include <inlib/sg/separator>
#include <inlib/sg/hep_strings>
#include <inlib/mathf>

namespace EsbRootView {

class firework_anim : public inlib::sg::firework_anim {
  typedef inlib::sg::firework_anim parent;
protected:
  bool radius_cut(float a_x0,float a_y0,float a_z0,
                  float a_nx,float a_ny,float a_nz,
                  float& a_x,float& a_y,float& a_z) const {
    float r = inlib::fsqrt(a_x*a_x+a_y*a_y);
    if(r<m_radius) return true;
    float theta = inlib::fatan2(a_y,a_x);
    float x = m_radius*inlib::fcos(theta);
    float y = m_radius*inlib::fsin(theta);
    float lambda = 0;
    if(inlib::ffabs(a_nx)>inlib::ffabs(a_ny)) {
      lambda = (x-a_x0)/a_nx;
    } else {
      lambda = (y-a_y0)/a_ny;
    }
    a_x = x;
    a_y = y;
    a_z = a_z0+a_nz*lambda;
    return true;
  }
public:
  virtual bool cut(float a_x0,float a_y0,float a_z0,
                   float a_nx,float a_ny,float a_nz,
                   float& a_x,float& a_y,float& a_z) {
    float x0 = a_x0;
    float y0 = a_y0;
    float z0 = a_z0;
    float w0 = 1;
    m_inv.mul_4(x0,y0,z0,w0);

  //if(z0<-m_half_length) return false;
  //if(z0>m_half_length) return false;
  //float r0 = inlib::fsqrt(x0*x0+y0*y0);
  //if(r0>m_radius) return false;

    float nx = a_nx;
    float ny = a_ny;
    float nz = a_nz;
    m_inv.mul_dir_3(nx,ny,nz);

    float x = a_x;
    float y = a_y;
    float z = a_z;
    float w = 1;
    m_inv.mul_4(x,y,z,w);

    if(z<-m_half_length) {
      if(!nz) return false;  //in principle at this point, nz can't be 0, but well.
      float lambda = (-m_half_length-z0)/nz;
      float _x = x0+nx*lambda;
      float _y = y0+ny*lambda;
      float _z = z0+nz*lambda;
      if(radius_cut(x0,y0,z0,nx,ny,nz,_x,_y,_z)) {
        a_x = _x;a_y = _y;a_z = _z;
        w = 1;
        m_matrix.mul_4(a_x,a_y,a_z,w);
        return true;
      }

    } else if(z>m_half_length) {
      if(!nz) return false;
      float lambda = (m_half_length-z0)/nz;
      float _x = x0+nx*lambda;
      float _y = y0+ny*lambda;
      float _z = z0+nz*lambda;
      if(radius_cut(x0,y0,z0,nx,ny,nz,_x,_y,_z)) {
        a_x = _x;a_y = _y;a_z = _z;
        w = 1;
        m_matrix.mul_4(a_x,a_y,a_z,w);
        return true;
      }

    } else {
      float r = inlib::fsqrt(x*x+y*y);
      if(r>m_radius) {
        float theta = inlib::fatan2(y,x);
        float _x = m_radius*inlib::fcos(theta);
        float _y = m_radius*inlib::fsin(theta);
        float lambda = 0;
        if(inlib::ffabs(nx)>inlib::ffabs(ny)) {
          lambda = (_x-x0)/nx;
        } else {
          lambda = (_y-y0)/ny;
        }
        a_x = _x;
        a_y = _y;
        a_z = z0+nz*lambda;
        w = 1;
        m_matrix.mul_4(a_x,a_y,a_z,w);
        return true;
      }
    }
    return false;
  }
  virtual void end_persistent(float a_bx,float a_by,float a_bz,float a_ex,float a_ey,float a_ez) {
    if(m_name.empty()) return;

    float tx = (a_ex-a_bx)*0.5f;
    float ty = (a_ey-a_by)*0.5f;
    float tz = (a_ez-a_bz)*0.5f;

    inlib::sg::separator* sep = new inlib::sg::separator;

    inlib::sg::matrix* mtx = new inlib::sg::matrix;
    mtx->set_translate(tx,ty,tz);
    sep->add(mtx);

    exlib::sg::text_freetype_marker* text = new exlib::sg::text_freetype_marker;
    text->font = inlib::sg::font_stixgeneral_otf();
    std::vector<inlib::sg::base_freetype::unichar> line;
    if(!inlib::sg::cvt2stix(m_name,line)) {}
    text->unitext.add(line);
    text->height = text->height.value()*m_text_scale;
    sep->add(text);

    m_group.add(sep);
  }
public:
  firework_anim(const inlib::mat4f& a_matrix,float a_radius,float a_length,
                const std::string& a_name = std::string(),float a_text_scale = 1)
  :parent()
  ,m_matrix(a_matrix)
  ,m_radius(a_radius)
  ,m_length(a_length)
  ,m_half_length(a_length*0.5f)
  ,m_name(a_name)
  ,m_text_scale(a_text_scale)
  {
    if(!m_matrix.invert(m_inv)) {}
  }
  virtual ~firework_anim() {}
protected:
  firework_anim(const firework_anim& a_from)
  :parent(a_from)
  ,m_matrix(a_from.m_matrix)
  ,m_inv(a_from.m_inv)
  ,m_radius(a_from.m_radius)
  ,m_length(a_from.m_length)
  ,m_half_length(a_from.m_half_length)
  ,m_name(a_from.m_name)
  ,m_text_scale(a_from.m_text_scale)
  {}
  firework_anim& operator=(const firework_anim& a_from){
    parent::operator=(a_from);
    m_matrix = a_from.m_matrix;
    m_inv = a_from.m_inv;
    m_radius = a_from.m_radius;
    m_length = a_from.m_length;
    m_half_length = a_from.m_half_length;
    m_name = a_from.m_name;
    m_text_scale = a_from.m_text_scale;
    return *this;
  }
protected:
  inlib::mat4f m_matrix;
  inlib::mat4f m_inv;
  float m_radius;
  float m_length;
  float m_half_length;
  std::string m_name;
  float m_text_scale;
};

}

#endif
