// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file EsbRootView.license for terms.

#ifndef EsbRootView_main
#define EsbRootView_main

#define INLIB_HISTO_PLOT_OFFSCREEN_HAVE_PNG
#define INLIB_HISTO_PLOT_OFFSCREEN_HAVE_JPEG

#include "dac"
#include "background_popup"
#include "insh/app"

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
#include <exlib/app/main>
#include <exlib/bsg_opener>
#include <exlib/insh/app>

#include <inlib/sg/dac_opener>

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

namespace EsbRootView {

class main
:public exlib::app::main
,public inlib::sg::view_evd
,public inlib::sg::plotarea
,public dac {
  typedef exlib::app::main parent;
  typedef inlib::sg::view_evd parent_evd;
  typedef inlib::sg::plotarea parent_plotarea;
  typedef dac parent_dac;
public:
  INLIB_SCLASS(EsbRootView::main)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<main>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<view_evd>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<dac>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_plotarea>(this,a_class)) return p;
    return parent::cast(a_class);
  }
public:
  static const std::string& s_version() {
    static const std::string s_v(ESBROOTVIEW_VERSION);
    return s_v;
  }
  static const std::string& s_args_help() {
    static const std::string s_v;
    return s_v;
  }
private:
#ifdef EXLIB_METAL_DRAW_WHEN_NEEDED
#else
public:
  virtual void set_to_render() {}
#endif
protected:
  virtual inlib::sg::node* create_main_menu() {
    insh().exec_line_reset_to_stop("gui_main.insh");
    return pop_list(false); //important: have false to not delete the popped item.
  }

  virtual void create_camenu_items(unsigned int a_nb,float a_wcw,float a_wch,float a_wb,float a_hb) {
    parent::create_camenu_items(a_nb,a_wcw,a_wch,a_wb,a_hb);

    INLIB_VIEW_EVD_ADD_CAMENU_ITEMS

    create_main_button_insh(*this,a_wcw,a_wch,a_wb,a_hb,0,2,0,"anim","","",insh(),"gui_hide_camera_menu\ngui_scene_anims.insh");

    create_main_button_insh(*this,a_wcw,a_wch,a_wb,a_hb,0,2,1,"evis","","object_rotate_left.jpg",insh(),"event_source_insh");

    create_main_button_insh(*this,a_wcw,a_wch,a_wb,a_hb,0,2,2,"next","","event.jpg",insh(),"event_next");

  }

protected:  //insh
  EXLIB_INSH_APP_HEADER(main)
public:
  main(std::ostream& a_out,
       inlib::sg::render_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const inlib::sg::selection& a_selection,
       const std::string& a_doc_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent("EsbRootView",ESBROOTVIEW_VERSION,a_out,a_gl_mgr,a_ttf,a_selection,
          a_doc_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,parent_evd(parent::get_me())
  ,parent_plotarea(parent::get_me())
  ,parent_dac(a_out)
  {
    insh_app_add_cmds();
    ESBROOTVIEW_INSH_ADDS(parent::m_main_insh,*this)

    m_opener.add_ext(inlib::file::s_ext_root());
  //m_opener.add_opener(inlib::file::s_format_root(),new EsbRootView::opener());
    m_opener.add_opener(inlib::file::s_format_root(),new inlib::sg::dac_opener<dac>());

    m_opener.add_ext(inlib::file::s_ext_bsg());
   {inlib::sg::bsg_factories bfac;
    inlib::sg::add_factories(bfac);
    exlib::sg::add_factories(bfac);
    m_opener.add_opener(inlib::file::s_format_bsg(),new exlib::bsg_opener(bfac));}

  //if(inlib::device::is_Android()) {
  //  // When triggering a camenu button, we receive AMOTION_EVENT_ACTION_MOVE, which
  //  // will induce scene rotation if m_param.m_touch_move is true (see gui_viewer::touch_move()).
  //  m_params.m_touch_move = false;
  //}

    m_popup_cbks.add(new background_popup(*this,insh()));

    scene().add(create_to_stop_event_anim_holder());
  }
  virtual ~main() {}
protected:
  main(const main& a_from)
  :parent(a_from)
  ,parent_evd(a_from)
  ,parent_plotarea(a_from)
  ,parent_dac(a_from)
  {}
private:
  main& operator=(const main& a_from){
    parent::operator=(a_from);
    parent_evd::operator=(a_from);
    parent_plotarea::operator=(a_from);
    return *this;
  }
};

}

#endif
