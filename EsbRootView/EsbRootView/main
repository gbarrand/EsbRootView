// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file EsbRootView.license for terms.

#ifndef EsbRootView_EsbRootView_main
#define EsbRootView_EsbRootView_main

#include <string>

namespace EsbRootView {

class context {
public:
  context(const std::string&) {}
  virtual ~context() {}
protected:
  context(const context&){}
  context& operator=(const context&){return *this;}
};

}

#include "version"

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
#define INLIB_HISTO_PLOT_OFFSCREEN_HAVE_PNG
#define INLIB_HISTO_PLOT_OFFSCREEN_HAVE_JPEG

#include "dac"
#include "actions"
#include "opener"
#include "background_popup"

#include <exlib/app/main>

#include <exlib/bsg_opener>

#include <inlib/cbk/out>
#include <inlib/cbk/sg_client>
#include <inlib/ftp/cbk>
#include <inlib/cbk/sg_serv>
#include <inlib/cbk/insh>

//////////////////////////////////////////////////////
/// insh : ///////////////////////////////////////////
//////////////////////////////////////////////////////
#include <exlib/insh>
#include <exlib/cbk/insh_rbsg>

#include <inlib/hep/insh_pdg>
#include <inlib/rroot/insh>
#include <inlib/yacc/insh_calc>
#include <inlib/sg/insh_node>
#include <inlib/sg/insh_gui_viewer>
#include <inlib/sg/insh_view_evd>
#include <inlib/sg/insh_plotarea>
#include <inlib/sg/insh_view_plots>
#include <inlib/cbk/insh_sg_add>
#include <inlib/histo/insh>
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

#include <inlib/exa/gui>

namespace EsbRootView {

class main
:public exlib::app::main
,public inlib::sg::view_evd
,public inlib::sg::plotarea
,public dac {
  typedef exlib::app::main parent;
  typedef inlib::sg::view_evd parent_evd;
  typedef inlib::sg::plotarea parent_plotarea;
  typedef dac parent_dac;
public:
  INLIB_SCLASS(EsbRootView::main)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<main>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<view_evd>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<dac>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_plotarea>(this,a_class)) return p;
    return parent::cast(a_class);
  }
public:
  static const std::string& s_version() {
    static const std::string s_v(ESBROOTVIEW_VERSION);
    return s_v;
  }
  static const std::string& s_args_help() {
    static const std::string s_v;
    return s_v;
  }
private:
  INLIB_CLASS_STRING_VALUE(scene_anims,scene anims)
protected:
  virtual inlib::sg::node* create_main_menu() {
    //m_out << "EsbRootView::main::create_home_menu : " << std::endl;

    inlib::sg::list* list = new inlib::sg::list(ttf());
    set_style(*list);

    //list->text_height_automated.value(true); //too slow.
    //list->visible_items.value(10);

    inlib::sg::add_white_item(*this,*list,"setups",action_menu_setups);
    inlib::sg::add_white_item(*this,*list,"neard",action_menu_neard);
    inlib::sg::add_white_item(*this,*list,"fard",action_menu_fard);
    inlib::sg::add_white_item_insh(*this,*list,"fgd geo",". fgd_add_geometry.insh\ngui_hide_main_menu");
    inlib::sg::add_white_item_insh(*this,*list,"geo infos" ,". geo_infos.insh");
    inlib::sg::add_white_item(*this,*list,"vis items",action_menu_vis_event_items);
    inlib::sg::add_image_item_insh(*this,*list,"show plots","plot.jpg","plots_show\ngui_hide_main_menu");
    inlib::sg::add_image_item_insh(*this,*list,"hide plots","hide_plot.jpg","plots_hide\ngui_hide_main_menu");
    inlib::sg::add_white_item(*this,*list,"plot items",action_menu_plot_items);
    inlib::sg::add_white_item_insh(*this,*list,"event model",". gui_event_model.insh");

    inlib::sg::add_white_item_insh(*this,*list,". startup.insh",". startup.insh");

    inlib::sg::add_image_item(*this,*list,inlib::sg::s_files(),"files.jpg",inlib::cbk::action_menu_files);
    if(has_open_panel()) {
      inlib::sg::add_image_item(*this,*list,"open...","files.jpg",inlib::sg::action_open_open_panel);
    }
    
    if(inlib::device::is_emscripten()) {
    /*
     {std::string script
 ("web_get_file -out=geo_full.root 'https://gbarrand.github.io/EsbRootView/data/nu_mu-300MeV-10events/geo_full.root'");
      inlib::sg::add_white_item_insh(*this,*list,"wget github nu_mu-300MeV-10events/geo_full.root",script);}
     {std::string script
 ("web_get_file -out=evetest.root 'https://gbarrand.github.io/EsbRootView/data/nu_mu-300MeV-10events/evetest.root'");
      inlib::sg::add_white_item_insh(*this,*list,"wget github nu_mu-300MeV-10events/evetest.root",script);}
*/
      std::string script("\
web_get_file -out=geo_full.root 'https://gbarrand.github.io/EsbRootView/data/nu_mu-300MeV-10events/geo_full.root'\n\
web_get_file -out=evetest.root 'https://gbarrand.github.io/EsbRootView/data/nu_mu-300MeV-10events/evetest.root'\n\
");
      inlib::sg::add_white_item_insh(*this,*list,"wget github nu_mu-300MeV-10events",script);
    }

    if(inlib::device::is_emscripten()) {
    } else {
      if(m_ftps.size())
        inlib::sg::add_image_item(*this,*list,"ftp","location_ftp.jpg",inlib::ftp::action_ftp,inlib::ftp::pos_data(m_ftps,false,0,0));
    }

    inlib::sg::add_image_item_insh(*this,*list,"next event","event.jpg","event_next\ngui_hide_main_menu");
    inlib::sg::add_image_item(*this,*list,"vis events","vis_events.jpg",action_menu_vis_events);
    inlib::sg::add_image_item_insh(*this,*list,"stop events","stop_events.jpg","event_stop_anim");

    inlib::sg::add_white_item(*this,*list,s_scene_anims(),action_menu_scene_anims);
    inlib::sg::add_image_item(*this,*list,"plots","set_current_region.jpg",inlib::sg::action_menu_plots_layout);
  //inlib::sg::add_image_item(*this,*list,s_edit_plots(),"edit_plot.jpg",inlib::sg::action_edit_plot);

  //inlib::sg::add_white_item(*this,*list,"insh",inlib::cbk::action_menu_insh);
    inlib::sg::add_white_item(*this,*list,"insh",inlib::cbk::action_menu_insh_keyboard);
    inlib::sg::add_image_item_insh(*this,*list,"anim","object_rotate_left.jpg","camera_start_anim move_rotate_around_focal_right\ngui_hide_main_menu");

    inlib::sg::add_image_item_insh(*this,*list,"clear event","clear_event.jpg","scene_clear_dynamic");
    inlib::sg::add_image_item_insh(*this,*list,"clear detector","clear_static.jpg","scene_clear_static");
    inlib::sg::add_image_item_insh(*this,*list,"reset","edit_undo.jpg","camera_reset\ngui_hide_main_menu");

    if(inlib::device::is_emscripten()) {
    } else {
      //if(m_walls._walls().size()) {
    //inlib::sg::add_image_item(*this,*list,inlib::sg::s_to_serv(),"connect_to_wall.jpg",inlib::cbk::action_menu_sg_client);
      inlib::sg::add_white_item(*this,*list,inlib::sg::s_to_serv(),inlib::cbk::action_menu_sg_client);
      //}
      inlib::sg::add_white_item(*this,*list,inlib::sg::s_sg_serv(),inlib::cbk::action_menu_sg_serv);
    }

    inlib::sg::add_image_item(*this,*list,"export","document_export.jpg",inlib::cbk::action_menu_export);
    inlib::sg::add_white_item(*this,*list,"colors",inlib::exa::colors);
    inlib::sg::add_image_item(*this,*list,"utils","tools.jpg",inlib::sg::action_menu_utils);

   {std::string script;
    script += "line_0='App : EsbRootView'";                              script += "\n";
    script += "line_1='Version : "+std::string(ESBROOTVIEW_VERSION)+"'"; script += "\n";
    script += "line_2='Software : Guy Barrand'";                         script += "\n";
    script += "line_3='Models : ESSnuSB collaboration'";                 script += "\n";
    script += "gui_text \"${line_0}\" \"${line_1}\" \"${line_2}\" \"${line_3}\"";
    inlib::sg::add_image_item_insh(*this,*list,"about","icon.jpg",script);}

    if(!inlib::device::stop_app_button()){
      inlib::sg::add_image_item_insh(*this,*list,"exit","application_exit.jpg","gui_set_to_exit");
    }

    return list;
  }

  virtual void create_camenu_items(unsigned int a_nb,float a_wcw,float a_wch,float a_wb,float a_hb) {
    parent::create_camenu_items(a_nb,a_wcw,a_wch,a_wb,a_hb);

    INLIB_VIEW_EVD_ADD_CAMENU_ITEMS

    create_main_button_insh(*this,a_wcw,a_wch,a_wb,a_hb,0,2,0,"anim","","","gui_hide_camera_menu\ngui_show_main_menu\ngui_push_home\ngui_exec_main_menu_item '"+s_scene_anims()+"'");

    create_main_button_insh(*this,a_wcw,a_wch,a_wb,a_hb,0,2,1,"evis","","object_rotate_left.jpg","event_source_insh");

    create_main_button_insh(*this,a_wcw,a_wch,a_wb,a_hb,0,2,2,"next","","event.jpg","event_next");

  }

protected:
  ///////////////////////////////////////////////////////////////
  /// insh : ////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////
  bool _open_geometry_file(const std::vector<std::string>& a_args) {
    static const std::string s_cmd_header("EsbRootView::_open_geometry_file :");
    inlib::args _args(a_args);
    std::string file;
    if(!_args.first_not_hyphen(file)) {
      m_insh.warn(s_cmd_header+" no output file given.");
      return false;
    }
    if(_args.is_arg("-doc_res")) {
      std::string path;
      if(!find_doc_res_file(file,path)) {
        m_insh.warn(s_cmd_header+" file "+inlib::sout(file)+" not found in doc and res dirs.");
        return false;
      }
      file = path;
    } else if(_args.is_arg("-doc")) {
      std::string path;
      if(!find_doc_file(file,path)) {
        m_insh.warn(s_cmd_header+" file "+inlib::sout(file)+" not found in doc dir.");
        return false;
      }
      file = path;
    } else if(_args.is_arg("-res")) {
      std::string path;
      if(!find_res_file(file,path)) {
        m_insh.warn(s_cmd_header+" file "+inlib::sout(file)+" not found in res dir.");
        return false;
      }
      file = path;
    }
    if(!open_geometry_file(file)) {
      m_insh.warn(s_cmd_header+" can't open "+inlib::sout(file));
      return true;
    }
    return true;
  }
  static const std::string& _open_geometry_file_help() {
    static const std::string s_help("\
open_geometry_file: open_geometry_file [-doc_res,-res,-doc] path\n\
  Open a root geometry file.\n\
  If no directory is given in path, the -doc_res option permits to search a file first\n\
  in the document directory declared to the app, and then in the app (internal) resource directory.\n\
  -res for the resource directory only, -doc for the document directory only.\n\
  See also : app_dir.\n\
");
    return s_help;
  }

  bool _open_event_file(const std::vector<std::string>& a_args) {
    static const std::string s_cmd_header("EsbRootView::_open_event_file :");
    inlib::args _args(a_args);
    std::string file;
    if(!_args.first_not_hyphen(file)) {
      m_insh.warn(s_cmd_header+" no output file given.");
      return false;
    }
    if(_args.is_arg("-doc_res")) {
      std::string path;
      if(!find_doc_res_file(file,path)) {
        m_insh.warn(s_cmd_header+" file "+inlib::sout(file)+" not found in doc and res dirs.");
        return false;
      }
      file = path;
    } else if(_args.is_arg("-doc")) {
      std::string path;
      if(!find_doc_file(file,path)) {
        m_insh.warn(s_cmd_header+" file "+inlib::sout(file)+" not found in doc dir.");
        return false;
      }
      file = path;
    } else if(_args.is_arg("-res")) {
      std::string path;
      if(!find_res_file(file,path)) {
        m_insh.warn(s_cmd_header+" file "+inlib::sout(file)+" not found in res dir.");
        return false;
      }
      file = path;
    }
    event_index() = 0;
    if(!open_event_file(file)) {
      m_insh.warn(s_cmd_header+" can't open "+inlib::sout(file));
      return false;
    }
    return true;
  }
  static const std::string& _open_event_file_help() {
    static const std::string s_help("\
open_event_file: open_event_file [-doc_res,-res,-doc] path\n\
  Open a root event file.\n\
  If no directory is given in path, the -doc_res option permits to search a file first\n\
  in the document directory declared to the app, and then in the app (internal) resource directory.\n\
  -res for the resource directory only, -doc for the document directory only.\n\
  See also : app_dir.\n\
");
    return s_help;
  }

#define ESBROOTVIEW_PRINT_FIELDS(a__evaluator) \
 {Esb##a__evaluator##_evaluator _eval(m_out,"",one_event());\
  std::vector<std::string> names;\
  _eval.get_names(names);\
  if(m_insh.in_backquote()) {\
    m_insh.out(names,true);\
  } else {\
    inlib::sort::sort(names);\
    m_insh.unix_print(names);\
  }}

  void _event_model(const std::vector<std::string>&  a_args) {
    if(a_args.empty()) {
      m_insh.out_begin();
      m_insh.out("MCTrack :",true);
      ESBROOTVIEW_PRINT_FIELDS(MCTrack)
      m_insh.out("",true);
      m_insh.out("WCDetectorPoint :",true);
      ESBROOTVIEW_PRINT_FIELDS(DetectorPoint)
      m_insh.out("",true);
      m_insh.out("FgdDetectorPoint :",true);
      ESBROOTVIEW_PRINT_FIELDS(DetectorPoint)
      m_insh.out("",true);
      m_insh.out("FgdHit :",true);
      ESBROOTVIEW_PRINT_FIELDS(FgdHit)
      return;
    }
    inlib::args _args(a_args);
    if(_args.is_arg("-items")) {
      m_insh.out_begin();
      m_insh.out("MCTrack",true);
      m_insh.out("WCDetectorPoint",true);
      m_insh.out("FgdDetectorPoint",true);
      m_insh.out("FgdHit",true);
      return;
    }
    std::string event_model_item;
    if(!_args.first_not_hyphen(event_model_item)) return;
    if(event_model_item=="MCTrack") {
      m_insh.out_begin();
      ESBROOTVIEW_PRINT_FIELDS(MCTrack)
      return;
    }
    if(event_model_item=="WCDetectorPoint") {
      m_insh.out_begin();
      ESBROOTVIEW_PRINT_FIELDS(DetectorPoint)
      return;
    }
    if(event_model_item=="FgdDetectorPoint") {
      m_insh.out_begin();
      ESBROOTVIEW_PRINT_FIELDS(DetectorPoint)
      return;
    }
    if(event_model_item=="FgdHit") {
      m_insh.out_begin();
      ESBROOTVIEW_PRINT_FIELDS(FgdHit)
      return;
    }
    static const std::string s_cmd_header("EsbRootView::_event_model :");
    m_insh.warn(s_cmd_header+" unknown even model item "+inlib::sout(event_model_item)+".");
  }

#undef ESBROOTVIEW_PRINT_FIELDS

  static const std::string& _event_model_help() {
    static const std::string s_help("\
event_model: event_model [class]\n\
  Print event model items along with their fields.\n\
  -items prints event model items only.\n\
  If a class is given, print the fields of this class.\n\
  Fields permit, for example, to pass cut in event_vis,\n\
  event_count, event_stats, event_print, event_histo, event_plot commands.\n\
  Examples:\n\
    event_model\n\
    event_model -items\n\
    event_model MCTrack\n\
  Related examples:\n\
    event_vis  MCTrack -cut=(pdg==50000050) -color=red\n\
    event_vis MCTrack -cut=name==\"'opticalphoton'\" -color=blue\n\
    event_histo MCTrack -name=h_MCTrack -cut=(pdg!=50000050) -xfill=p\n\
    event_plot MCTrack -cut=(pdg!=50000050) -xfill=p\n\
    event_print WCDetectorPoint -cut=index<10 x y z p\n\
");
    return s_help;
  }


  void _event_model_items(std::vector<std::string>& a_names) const {
    a_names.clear();
    a_names.push_back("MCTrack");
    a_names.push_back("WCDetectorPoint");
    a_names.push_back("FgdDetectorPoint");
    a_names.push_back("FgdHit");
  }

  void _event_model_items() {
    std::vector<std::string> names;
    _event_model_items(names);
    m_insh.out_begin();
    inlib_vforcit(std::string,names,it) m_insh.out(*it,true);
  }

#define ESBROOTVIEW_EVENT_MODEL_ACTION(a__action)\
  void _event_##a__action(const std::vector<std::string>& a_args) {\
    static const std::string s_cmd_header("EsbRootView::_event_"+std::string(#a__action)+" :");\
    if(a_args.empty()) {_event_model_items();return;}\
    const std::string& what = a_args[0];\
    std::vector<std::string> args(a_args);\
    args.erase(args.begin());\
    /*inlib::args _args(a_args);\
    std::string what;\
    if(!_args.first_not_hyphen(what)) {_event_model_items();return;}\
    _args.remove(what);\
    std::vector<std::string> args;\
    _args.to_vector(args);*/\
    if(what=="MCTrack")          {MCTrack_##a__action(*this,args);return;}\
    if(what=="WCDetectorPoint")  {WCDetectorPoint_##a__action(*this,args);return;}\
    if(what=="FgdDetectorPoint") {FgdDetectorPoint_##a__action(*this,args);return;}\
    if(what=="FgdHit")           {FgdHit_##a__action(*this,args);return;}\
    m_insh.warn(s_cmd_header+" event model item "+inlib::sout(what)+" unknown.");\
  }

  ESBROOTVIEW_EVENT_MODEL_ACTION(vis)
  ESBROOTVIEW_EVENT_MODEL_ACTION(count)
  ESBROOTVIEW_EVENT_MODEL_ACTION(stats)
  ESBROOTVIEW_EVENT_MODEL_ACTION(print)
  ESBROOTVIEW_EVENT_MODEL_ACTION(hfill)
  ESBROOTVIEW_EVENT_MODEL_ACTION(histo)
  ESBROOTVIEW_EVENT_MODEL_ACTION(plot)
  ESBROOTVIEW_EVENT_MODEL_ACTION(fields)

#undef ESBROOTVIEW_EVENT_MODEL_ACTION

  static const std::string& _event_vis_help() {
    static const std::string s_help("\
event_vis: event_vis item [cut]\n\
  Visualize event model item instances.\n\
  Someone can give a cut in option.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_vis\n\
    event_vis MCTrack\n\
    event_vis MCTrack -cut=pdg==50000050\n\
");
    return s_help;
  }
  static const std::string& _event_count_help() {
    static const std::string s_help("\
event_count: event_count item [cut]\n\
  Count event model item instances.\n\
  Someone can give a cut in option.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_count\n\
    event_count MCTrack\n\
    event_count MCTrack -cut=pdg==50000050\n\
");
    return s_help;
  }
  static const std::string& _event_stats_help() {
    static const std::string s_help("\
event_stats: event_stats item [-cut,-sum,-min,-max,-mean,-rms] [fields]\n\
  Print event model item fields sum/min/max/mean/rms.\n\
  Someone can give a cut in option and a list of fields.\n\
  If only one field and one of [-sum,-min,-max,-mean,-rms] are specifed, then\n\
  the single number [sum,min,max,mean,rms] is printed. This number can be used\n\
  with backquoting. If no field is given, all are considered.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_stats\n\
    event_stats MCTrack\n\
    event_stats MCTrack -cut=pdg==50000050 x y z p\n\
    event_stats MCTrack -cut=pdg==50000050 -mean p\n\
    mean_p=`event_stats MCTrack -cut=pdg==50000050 -mean p`\n\
    echo \"Mean impulse is ${mean_p}\"\n\
");
    return s_help;
  }
  static const std::string& _event_print_help() {
    static const std::string s_help("\
event_print: event_print item [cut] [fields]\n\
  Print event model item fields.\n\
  Someone can give a cut in option and a list of fields.\n\
  If no field is given, all are considered.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_print\n\
    event_print MCTrack\n\
    event_print MCTrack -cut=pdg==50000050 x y z p\n\
");
    return s_help;
  }
  static const std::string& _event_hfill_help() {
    static const std::string s_help("\
event_hfill: event_hfill item [-name,-cut,-xfill,-yfill]\n\
  Fill a managed histogram with the fields of event model item instances.\n\
  Someone can give a cut in option.\n\
  -name=string name of the managed histogram (mendatory).\n\
  -cut=string cut in the event model item instances.\n\
  -xfill=string expression to fill a 1D histo or the x of a 2D.\n\
  -yfill=string expression to fill the y of a 2D histogram.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_hfill\n\
    histo_create -xbins=100 -xmin=0 -xmax=1e-7 h_MCTrack\n\
    event_hfill MCTrack -name=h_MCTrack -xfill=p\n\
    histo_create -xbins=100 -xmin=0 -xmax=1e-7 h_MCTrack_cut\n\
    event_hfill MCTrack -name=h_MCTrack_cut -cut=pdg==50000050 -xfill=t\n\
    histo_create -class=h2d -xbins=100 -xmin=0 -xmax=1e-7 -ybins=100 -ymin=0 -ymax=100 h2_MCTrack\n\
    event_hfill MCTrack -name=h2_MCTrack -xfill=p -yfill=t\n\
    histo_ls\n\
");
    return s_help;
  }
  static const std::string& _event_histo_help() {
    static const std::string s_help("\
event_histo: event_histo item [-name,-cut,-[x,y][fill,bins,min,max]]\n\
  Histogram fields of event model item instances.\n\
  If -xfill given only, a 1D histogram is created and filled.\n\
  If -xfill and -yfill given, a 2D histogram is created and filled.\n\
  Someone can give a cut in option.\n\
  -name=string name of the managed histogram (mendatory).\n\
  -cut=string cut in the event model item instances.\n\
  -xfill=string expression to fill a 1D histo or the x of a 2D.\n\
  -yfill=string expression to fill the y of a 2D histogram.\n\
  -xbins=uint number of x bins (default is 100).\n\
  -xmin=real if given, xmin of the 1D histo.\n\
   If not given, it is guessed from -xfill applied on data.\n\
  -xmax=real if given, xmax of the 1D histo.\n\
   If not given, it is guessed from -xfill applied on data.\n\
  -ybins=uint number of y bins (default is 100).\n\
  -ymin=real if given, ymin of the 2D histo.\n\
   If not given, it is guessed from -yfill applied on data.\n\
  -ymax=real if given, ymax of the 2D histo.\n\
   If not given, it is guessed from -yfill applied on data.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_histo\n\
    event_histo MCTrack -name=h_MCTrack -xfill=p\n\
    event_histo MCTrack -name=h_MCTrack_cut -cut=pdg==50000050 -xfill=t\n\
    event_histo MCTrack -name=h2_MCTrack -xfill=p -yfill=t\n\
    histo_ls\n\
");
    return s_help;
  }
  static const std::string& _event_plot_help() {
    static const std::string s_help("\
event_plot: event_plot item [-cut,-[x,y][fill,bins,min,max]]\n\
  Plot field of event model item instances.\n\
  If -xfill given only, a 1D histogram is created, filled and plotted.\n\
  If -xfill and -yfill given, a 2D histogram is created, filled and plotted.\n\
  Someone can give a cut in option.\n\
  -cut=string cut in the event model item instances.\n\
  -histo_name=string if given, the transient histogram is managed,\n\
   else it is deleted when plotting is finished.\n\
  -xfill=string expression to fill a 1D histo or the x of a 2D.\n\
  -yfill=string expression to fill the y of a 2D histogram.\n\
  -filling=string deprecated. Same as -xfill.\n\
  -xbins=uint number of x bins (default is 100).\n\
  -xmin=real if given, xmin of the 1D histo.\n\
   If not given, it is guessed from -xfill applied on data.\n\
  -xmax=real if given, xmax of the 1D histo.\n\
   If not given, it is guessed from -xfill applied on data.\n\
  -ybins=uint number of y bins (default is 100).\n\
  -ymin=real if given, ymin of the 2D histo.\n\
   If not given, it is guessed from -yfill applied on data.\n\
  -ymax=real if given, ymax of the 2D histo.\n\
   If not given, it is guessed from -yfill applied on data.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_plot\n\
    event_plot MCTrack -xfill=p\n\
    event_plot MCTrack -cut=pdg==50000050 -xfill=t\n\
    event_plot MCTrack -cut=pdg==50000050 -xfill=p -yfill=t\n\
");
    return s_help;
  }
  static const std::string& _event_fields_help() {
    static const std::string s_help("\
event_fields: event_fields item\n\
  Print event model item fields.\n\
  Without any argument, the event model items are printed.\n\
  Example :\n\
    event_fields\n\
    event_fields MCTrack\n\
");
    return s_help;
  }

  static void _event_model_complete(const main& a_main,const std::string& a_begin,std::vector<std::string>& a_names) {
    if(a_begin.empty()) {
      a_main._event_model_items(a_names);
      inlib::sort::sort(a_names);
    } else {
      std::vector<std::string> names;
      a_main._event_model_items(names);
      a_names.clear();
      inlib_vforcit(std::string,names,it) {if(inlib::is_beg(*it,a_begin)) a_names.push_back(*it);}
      inlib::sort::sort(a_names);
    }
  }

  INLIB_INSH_CLASS_CMD(main,app_open_geometry_file,m_holder._open_geometry_file(a_args),_open_geometry_file_help())
  INLIB_INSH_CLASS_CMD(main,app_open_event_file,m_holder._open_event_file(a_args),_open_event_file_help())

  INLIB_INSH_CLASS_CMD(main,event_number,m_holder.insh().out_num(m_holder.number_of_events()),"event_number: event_number\n  Print the number of events.\n")
  INLIB_INSH_CLASS_CMD(main,event_index,m_holder.insh().out_num(m_holder.event().event_index()),"event_index: event_index\n  Print the event index.\n")
  INLIB_INSH_CLASS_CMD(main,event_next,vis_next_event(m_holder,a_args),"event_next: event_next [-number]\n  Get next event in file and source the event.insh script.\n  -no_exec to not source event.insh.\n  -number=uint do it number times (default is 1).\n")

  INLIB_INSH_CLASS_CMD(main,event_source_insh,source_event_insh(m_holder),"event_source_insh: event_source_insh\n  Source the event.insh script.\n")

  INLIB_INSH_CLASS_CMD(main,event_time_min,m_holder.insh().out_num(m_holder.event().time_min()),"event_time_min: event_time_min\n  Print event min time taking the min of all\n  MCTrack.t, WCDetectorPoint.time and FgdDetectorPoint.time\n")
  INLIB_INSH_CLASS_CMD(main,event_time_max,m_holder.insh().out_num(m_holder.event().time_max()),"event_time_max: event_time_max\n  Print event max time taking the max of all\n  MCTrack.t, WCDetectorPoint.time and FgdDetectorPoint.time\n")

  INLIB_INSH_CLASS_CMD(main,event_model,m_holder._event_model(a_args),_event_model_help())

  INLIB_INSH_CLASS_CMD_COMPLETE(main,event_vis,m_holder._event_vis(a_args),_event_vis_help(),_event_model_complete)
  INLIB_INSH_CLASS_CMD(main,event_count,m_holder._event_count(a_args),_event_count_help())
  INLIB_INSH_CLASS_CMD(main,event_stats,m_holder._event_stats(a_args),_event_stats_help())
  INLIB_INSH_CLASS_CMD(main,event_print,m_holder._event_print(a_args),_event_print_help())
  INLIB_INSH_CLASS_CMD(main,event_hfill,m_holder._event_hfill(a_args),_event_hfill_help())
  INLIB_INSH_CLASS_CMD(main,event_histo,m_holder._event_histo(a_args),_event_histo_help())
  INLIB_INSH_CLASS_CMD(main,event_plot,m_holder._event_plot(a_args),_event_plot_help())
  INLIB_INSH_CLASS_CMD(main,event_fields,m_holder._event_fields(a_args),_event_fields_help())

  ///////////////////////////////////////////////////////////////
  //// inlib/exlib : ////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////
  INLIB_INSH_CLASS_CMD(main,pdg,inlib::hep::insh_pdg(m_holder.m_insh,m_holder.m_pdgs,a_args),inlib::hep::insh_pdg_help())
  INLIB_INSH_CLASS_CMD(main,particle_print,insh_particle_print(m_holder.m_insh,m_holder.m_pdgs,m_holder.m_styles,a_args),inlib::hep::insh_particle_print_help())
  INLIB_RROOT_INSH_CLASSES(main,m_holder.m_insh,m_holder.m_geo_manager)  
  INLIB_INSH_CLASS_CMD(main,calc,inlib::insh_calc(m_holder.insh(),a_args),inlib::insh_calc_help())
  INLIB_INSH_CLASS_CMD(main,scene_read_bsg,exlib::cbk::insh_scene_read_bsg(m_holder,a_args),exlib::cbk::insh_scene_read_bsg_help())
  INLIB_SG_ADD_INSH_CLASSES(main)
  INLIB_NODE_INSH_CLASSES(main,m_holder.m_insh,m_holder.object_manager())
  INLIB_HISTO_INSH_CLASSES(main,m_holder.m_insh,m_holder.object_manager())
  INLIB_GUI_VIEWER_INSH_CLASSES(main)
  INLIB_VIEW_EVD_INSH_CLASSES(parent_evd)
  INLIB_PLOTAREA_INSH_CLASSES(parent_plotarea)
  INLIB_VIEW_PLOTS_INSH_CLASSES(main)
  EXLIB_INSH_CLASSES(main)

  void insh_add_cmds() {
    INLIB_INSH_ADD_CMD(m_insh,*this,event_number)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_index)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_time_min)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_time_max)

    INLIB_INSH_ADD_CMD(m_insh,*this,event_model)

    INLIB_INSH_ADD_CMD(m_insh,*this,event_vis)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_count)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_stats)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_print)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_hfill)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_histo)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_plot)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_fields)

    INLIB_INSH_ADD_CMD(m_insh,*this,event_next)
    INLIB_INSH_ADD_CMD(m_insh,*this,event_source_insh)

    INLIB_INSH_ADD_CMD(m_insh,*this,app_open_geometry_file)
    INLIB_INSH_ADD_CMD(m_insh,*this,app_open_event_file)

    INLIB_INSH_ADD_CMD(m_insh,*this,pdg)
    INLIB_INSH_ADD_CMD(m_insh,*this,particle_print)
    INLIB_RROOT_INSH_ADDS(m_insh,*this)
    INLIB_INSH_ADD_CMD(m_insh,*this,calc)
    INLIB_INSH_ADD_CMD(m_insh,*this,scene_read_bsg)
    INLIB_SG_ADD_INSH_ADDS(m_insh,*this)
    INLIB_NODE_INSH_ADDS(m_insh,*this)
    INLIB_HISTO_INSH_ADDS(m_insh,*this)
    INLIB_GUI_VIEWER_INSH_ADDS(m_insh,*this)
    INLIB_VIEW_EVD_INSH_ADDS(m_insh,*this)
    INLIB_PLOTAREA_INSH_ADDS(m_insh,*this)    
    INLIB_VIEW_PLOTS_INSH_ADDS(m_insh,*this)    
    EXLIB_INSH_ADDS(m_insh,*this)
  }

  INLIB_CLASS_STRING_VALUE(cmd_header,EsbRootView::main)

public:
  main(std::ostream& a_out,
       inlib::sg::render_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const inlib::sg::selection& a_selection,
       const std::string& a_doc_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent("EsbRootView",ESBROOTVIEW_VERSION,a_out,a_gl_mgr,a_ttf,a_selection,
          a_doc_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,parent_evd(parent::get_me())
  ,parent_plotarea(parent::get_me())
  ,parent_dac(parent::get_me())
  {
    insh_add_cmds();

    m_opener.add_ext(inlib::file::s_ext_root());
    m_opener.add_opener(inlib::file::s_format_root(),new EsbRootView::opener());

    m_opener.add_ext(inlib::file::s_ext_bsg());
   {inlib::sg::bsg_factories bfac;
    inlib::sg::add_factories(bfac);
    exlib::sg::add_factories(bfac);
    m_opener.add_opener(inlib::file::s_format_bsg(),new exlib::bsg_opener(bfac));}

  //if(inlib::device::is_Android()) {
  //  // When triggering a camenu button, we receive AMOTION_EVENT_ACTION_MOVE, which
  //  // will induce scene rotation if m_param.m_touch_move is true (see gui_viewer::touch_move()).
  //  m_params.m_touch_move = false;
  //}

    //////////////////////////////////////////////////////
    /// near setup : /////////////////////////////////////
    //////////////////////////////////////////////////////
    //inlib::sg::set_empty_scene_3D(*this,*this,1500);
    create_sg_evd(1500); //ok for near.

    inlib::sg::ortho* camera = new inlib::sg::ortho();
    camera->height = 1500;
    camera->znear = 1;
    camera->zfar = 100000;
    camera->focal = 1000;
    camera->dx = 10;
    camera->da = inlib::fdeg2rad(); //one degree.
    camera->ds = 0.99f;
    camera->position = inlib::vec3f(0,0,1000);
    replace_camera(camera);
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////

    //set_meta_zone_had_not_been_shown();

    //set_scene_clear_color(inlib::colorf_black());
    m_params.m_scene_screen_color = inlib::colorf_black();

    m_params.m_console_width = 0.5f; //to show time min/max if insh_anim.

    scene().add(create_to_stop_event_anim_holder());

    m_popup_cbks.add(new background_popup(*this));

    //////////////////////////////////////////////////////
    /// plots ////////////////////////////////////////////
    //////////////////////////////////////////////////////
  //set_layout_factors(0.32f,-0.32f,0.3f,0.3f);
  //set_layout_factors(0.38f,-0.38f,0.2f,0.2f);
  //set_layout_factors(0.34f,0.39f,0.3f,0.2f); //ok for far.
    set_layout_factors(0.3f,0.35f,0.3f,0.2f);
    add_plots_to_scene(); //add plotarea::m_plots under scene().
    hide_plots();

    show_main_menu();
  }
  virtual ~main() {}
protected:
  main(const main& a_from)
  :parent(a_from)
  ,parent_evd(a_from)
  ,parent_plotarea(a_from)
  ,parent_dac(a_from)
  {}
private:
  main& operator=(const main& a_from){
    parent::operator=(a_from);
    parent_evd::operator=(a_from);
    parent_plotarea::operator=(a_from);
    return *this;
  }
};

}

#endif
