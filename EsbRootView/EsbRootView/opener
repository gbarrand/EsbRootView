// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file EsbRootView.license for terms.

#ifndef EsbRootView_EsbRootView_opener
#define EsbRootView_EsbRootView_opener

#include "dac"

#include <inlib/sg/view_evd>

namespace EsbRootView {

class opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;

  INLIB_SCLASS(EsbRootView::opener)
public:
  virtual parent* copy() const {return new opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    return inlib::file::is_root(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,inlib::sg::viewer& a_viewer,const inlib::args&,bool& a_done) const {
    a_done = false;
    dac* _dac = cast_dac(a_viewer);
    if(!_dac) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;

    // A root file can contain geometry and events (as ess_near_genie.root).

    if(_dac->is_geometry_file(a_path)) {
      if(!_dac->open_geometry_file(a_path)) return false;
    }
    if(_dac->is_event_file(a_path)) {
      _evd->event_index() = 0;
      if(!_dac->open_event_file(a_path)) return false;
    }
 
    a_done = true;
    return true;
  }
  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,
                    inlib::sg::viewer&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args& a_args,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  opener(){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  opener(const opener& a_from):parent(a_from){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
  opener& operator=(const opener&){return *this;}  
};

}

#endif
